var documenterSearchIndex = {"docs":
[{"location":"man/contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"This page serves as the contribution guide for the DeepART package. From top to bottom, the ways of contributing are:","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"GitHub Issues: how to raise an issue with the project.\nJulia Development: how to download and interact with the package.\nGitFlow: how to directly contribute code to the package in an organized way on GitHub.\nDevelopment Details: how the internals of the package are currently setup if you would like to directly contribute code.","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"Please also see the Attribution to learn about the authors and sources of support for the project.","category":"page"},{"location":"man/contributing/#Issues","page":"Contributing","title":"Issues","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"The main point of contact is the GitHub issues page for the project. This is the easiest way to contribute to the project, as any issue you find or request you have will be addressed there by the authors of the package. Depending on the issue, the authors will collaborate with you, and after making changes they will link a pull request which addresses your concern or implements your proposed changes.","category":"page"},{"location":"man/contributing/#Julia-Development","page":"Contributing","title":"Julia Development","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"As a Julia package, development follows the usual procedure:","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"Clone the project from GitHub\nSwitch to or create the branch that you wish work on (see GitFlow).\nStart Julia at your development folder.\nInstantiate the package (i.e., download and install the package dependencies).","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"For example, you can get the package and startup Julia with","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"git clone git@github.com:AP6YC/DeepART.jl.git\njulia --project=.","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"note: Note\nIn Julia, you must activate your project in the current REPL to point to the location/scope of installed packages. The above immediately activates the project when starting up Julia, but you may also separately startup the julia and activate the package with the interactive package manager via the ] syntax:julia\njulia> ]\n(@v1.10) pkg> activate .\n(DeepART) pkg>","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"You may run the package's unit tests after the above setup in Julia with","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"julia> using Pkg\njulia> Pkg.instantiate()\njulia> Pkg.test()","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"or interactively though the Julia package manager with","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"julia> ]\n(DeepART) pkg> instantiate\n(DeepART) pkg> test","category":"page"},{"location":"man/contributing/#GitFlow","page":"Contributing","title":"GitFlow","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"The DeepART package follows the GitFlow git working model. The original post by Vincent Driessen outlines this methodology quite well, while Atlassian has a good tutorial as well. In summary:","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"Create a feature branch off of the develop branch with the name feature/<my-feature-name>.\nCommit your changes and push to this feature branch.\nWhen you are satisfied with your changes, initiate a GitHub pull request (PR) to merge the feature branch with develop.\nIf the unit tests pass, the feature branch will first be merged with develop and then be deleted.\nReleases will be periodically initiated from the develop branch and versioned onto the master branch.\nImmediate bug fixes circumvent this process through a hotfix branch off of master.","category":"page"},{"location":"man/contributing/#Development-Details","page":"Contributing","title":"Development Details","text":"","category":"section"},{"location":"man/contributing/#Documentation","page":"Contributing","title":"Documentation","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"These docs are currently hosted as a static site on the GitHub pages platform. They are setup to be built and served in a separate branch called gh-pages from the master/development branches of the project.","category":"page"},{"location":"man/contributing/#Package-Structure","page":"Contributing","title":"Package Structure","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"The DeepART project has the following file structure:","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"DeepART\n├── .github/workflows       // GitHub: workflows for testing and documentation.\n├── cluster                 // HPC: scripts and submission files for clusters.\n├── dockerfiles             // Docker: dockerfiles for experiment reproducibility.\n├── docs                    // Docs: documentation for the module.\n│   └───src                 //      Documentation source files.\n├── notebooks               // Source: experiment notebooks.\n├── scripts                 // Source: experiment scripts.\n├── src                     // Source: library source code.\n│   └───lib                 //      Library for the DeepART module.\n│       └───utils           //      Project utilities\n├── test                    // Test: Unit, integration, and environment tests.\n├── work                    // Data: datasets, results, plots, etc.\n│   ├───data                //      Source datasets for experiments.\n│   └───results             //      Destination for generated figures, etc.\n├── .gitattributes          // Git: LFS settings, languages, etc.\n├── .gitignore              // Git: .gitignore for the whole project.\n├── CODE_OF_CONDUCT.md      // Doc: the code of conduct for contributors.\n├── CONTRIBUTING.md         // Doc: contributing guide (points to this page).\n├── LICENSE                 // Doc: the license to the project.\n├── Project.toml            // Julia: the Pkg.jl dependencies of the project.\n└── README.md               // Doc: the top-level readme for the project.","category":"page"},{"location":"man/contributing/#Type-Aliases","page":"Contributing","title":"Type Aliases","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"For convenience in when defining types and function signatures, this package uses the NumericalTypeAliases.jl package and the aliases therein. The documentation for the abstract and concrete types provided by NumericalTypeAliases.jl can be found here.","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"In this package, data samples are always Real-valued, whereas class labels are integered. Furthermore, independent class labels are always Int because of the Julia native support for a given system's signed native integer type.","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"This project does not currently test for the support of arbitrary precision arithmetic because learning algorithms in general do not have a significant need for precision.","category":"page"},{"location":"man/contributing/#Attribution","page":"Contributing","title":"Attribution","text":"","category":"section"},{"location":"man/contributing/#Authors","page":"Contributing","title":"Authors","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"This package is developed and maintained by Sasha Petrenko with sponsorship by the Applied Computational Intelligence Laboratory (ACIL).","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"If you simply have suggestions for improvement, Sasha Petrenko (<petrenkos@mst.edu>) is the current developer and maintainer of the DeepART package, so please feel free to reach out with thoughts and questions.","category":"page"},{"location":"man/dev-index/#dev-main-index","page":"Dev Index","title":"Developer Index","text":"","category":"section"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"This page lists the types and functions that are internal to the DeepART package. Because they are not part of the public API, these names might change relatively frequently between versions and so should not be relied upon.","category":"page"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"All internal names are listed in the Index, and each of these entries link to the docstrings in the Docs section.","category":"page"},{"location":"man/dev-index/#Index","page":"Dev Index","title":"Index","text":"","category":"section"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"This section contains a list of internal names that link to their corresponding Documentation.","category":"page"},{"location":"man/dev-index/#dev-index-methods","page":"Dev Index","title":"Methods","text":"","category":"section"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"Pages   = [\"dev-index.md\"]\nModules = [DeepART]\nOrder = [:function]","category":"page"},{"location":"man/dev-index/#dev-index-types","page":"Dev Index","title":"Types","text":"","category":"section"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"Pages   = [\"dev-index.md\"]\nModules = [DeepART]\nOrder = [:type]","category":"page"},{"location":"man/dev-index/#dev-index-types-2","page":"Dev Index","title":"Constants","text":"","category":"section"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"Pages   = [\"dev-index.md\"]\nModules = [DeepART]\nOrder = [:constant]","category":"page"},{"location":"man/dev-index/#dev-index-docs","page":"Dev Index","title":"Docs","text":"","category":"section"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"Documentation for all internal names are listed below.","category":"page"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"Modules = [DeepART]\nPublic = false","category":"page"},{"location":"man/dev-index/#DeepART.ARG_COMMONARTMODULE","page":"Dev Index","title":"DeepART.ARG_COMMONARTMODULE","text":"ARG_COMMONARTMODULE\n\nDescription\n\nCommon docstring: argument for a CommonARTModule.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARG_CONFIG","page":"Dev Index","title":"DeepART.ARG_CONFIG","text":"ARG_CONFIG\n\nDescription\n\nCommon docstring; the configuration tuple.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARG_CONFIG_DICT","page":"Dev Index","title":"DeepART.ARG_CONFIG_DICT","text":"ARGCONFIGDICT\n\nDescription\n\nCommon docstring: config dictionary argument.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARG_CONFIG_FILE","page":"Dev Index","title":"DeepART.ARG_CONFIG_FILE","text":"ARGCONFIGFILE\n\nDescription\n\nCommon docstring: config filename argument.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARG_DATASPLIT","page":"Dev Index","title":"DeepART.ARG_DATASPLIT","text":"ARG_DATASPLIT\n\nDescription\n\nCommon docstring: argument for DataSplit.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARG_DEEPARTMODULE","page":"Dev Index","title":"DeepART.ARG_DEEPARTMODULE","text":"ARG_DEEPARTMODULE\n\nDescription\n\nCommon docstring: argument for a DeepARTModule for training or testing.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARG_DEEPHEADART","page":"Dev Index","title":"DeepART.ARG_DEEPHEADART","text":"ARG_DEEPHEADART\n\nDescription\n\nCommon docstring: argument for a DeepHeadART.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARG_FILENAME","page":"Dev Index","title":"DeepART.ARG_FILENAME","text":"ARG_FILENAME\n\nDescription\n\nCommon docstring: argument for a file name.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARG_INDEX","page":"Dev Index","title":"DeepART.ARG_INDEX","text":"ARG_INDEX\n\nDescription\n\nCommon docstring: argument for an index parameter.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARG_MULTIHEADFIELD","page":"Dev Index","title":"DeepART.ARG_MULTIHEADFIELD","text":"ARG_MULTIHEADFIELD\n\nDescription\n\nCommon docstring: argument for a MultiHeadField.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARG_N_CLASS","page":"Dev Index","title":"DeepART.ARG_N_CLASS","text":"ARGNCLASS\n\nDescription\n\nCommon docstring: argument for the number of classes.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARG_N_TEST","page":"Dev Index","title":"DeepART.ARG_N_TEST","text":"ARGNTEST\n\nDescription\n\nCommon docstring: argument for the number of testing samples to use.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARG_N_TRAIN","page":"Dev Index","title":"DeepART.ARG_N_TRAIN","text":"ARGNTRAIN\n\nDescription\n\nCommon docstring: argument for the number of training samples to use.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARG_P","page":"Dev Index","title":"DeepART.ARG_P","text":"ARG_P\n\nDescription\n\nCommon docstring: argument for a split ratio p.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARG_PLOT","page":"Dev Index","title":"DeepART.ARG_PLOT","text":"ARG_PLOT\n\nDescription\n\nCommon docstring: argument for an existing Plots.Plot object to plot atop.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARG_SHUFFLE","page":"Dev Index","title":"DeepART.ARG_SHUFFLE","text":"ARG_SHUFFLE\n\nDescription\n\nCommon docstring: argument for a training dataset shuffle flag.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARG_SIMPLEDEEPART","page":"Dev Index","title":"DeepART.ARG_SIMPLEDEEPART","text":"ARG_SIMPLEDEEPART\n\nDescription\n\nSimpleDeepART argument docstring.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARG_SIM_D","page":"Dev Index","title":"DeepART.ARG_SIM_D","text":"ARGSIMD\n\nDescription\n\nCommon docstring: argument for the simulation options dictionary.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARG_SIM_DIR_FUNC","page":"Dev Index","title":"DeepART.ARG_SIM_DIR_FUNC","text":"ARGSIMDIR_FUNC\n\nDescription\n\nCommon docstring: argument for a directory function\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARG_SIM_OPTS","page":"Dev Index","title":"DeepART.ARG_SIM_OPTS","text":"ARGSIMOPTS\n\nDescription\n\nCommon docstring: argument for additional simulation options.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARG_SIZE_TUPLE","page":"Dev Index","title":"DeepART.ARG_SIZE_TUPLE","text":"ARGSIZETUPLE\n\nDescription\n\nThe model input size tuple argument docstring.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARG_SUPERVISEDDATASET","page":"Dev Index","title":"DeepART.ARG_SUPERVISEDDATASET","text":"ARG_SUPERVISEDDATASET\n\nDescription\n\nCommon docstring: argument for SupervisedDataset.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARG_TIDATA","page":"Dev Index","title":"DeepART.ARG_TIDATA","text":"ARG_TIDATA\n\nDescription\n\nCommon docstring: argument for task-incremental data splits implemented as a ClassIncrementalDataSplit.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARG_X","page":"Dev Index","title":"DeepART.ARG_X","text":"ARG_X\n\nDescription\n\nCommon docstring: argument for input data of arbitrary dimension.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARG_Y","page":"Dev Index","title":"DeepART.ARG_Y","text":"ARG_Y\n\nDescription\n\nCommon docstring: argument for a label 'y'.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ART_ARG_DOCSTRING","page":"Dev Index","title":"DeepART.ART_ARG_DOCSTRING","text":"ARTARGDOCSTRING\n\nDescription\n\nCommon docstring: argument for an ARTModule.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ART_X_W_ARGS","page":"Dev Index","title":"DeepART.ART_X_W_ARGS","text":"ARTXW_ARGS\n\nDescription\n\nCommon docstring: shared arguments string for methods using an ART module, sample 'x', and weight vector 'W'.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.BLOCK_TYPES","page":"Dev Index","title":"DeepART.BLOCK_TYPES","text":"BLOCK_TYPES\n\nDescription\n\nThe names of the blocks that are encountered during L2 experiments.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.COLORSCHEME","page":"Dev Index","title":"DeepART.COLORSCHEME","text":"Plotting colorscheme.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.CommonARTModule","page":"Dev Index","title":"DeepART.CommonARTModule","text":"CommonARTModule\n\nDescription\n\nUnion for functions accepting both DeepARTModules and ART.ARTModules.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.DATA_DISPATCH","page":"Dev Index","title":"DeepART.DATA_DISPATCH","text":"DATA_DISPATCH\n\nDescription\n\nA map of dataset names to their loading functions.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.DATA_PACKAGE_NAMES","page":"Dev Index","title":"DeepART.DATA_PACKAGE_NAMES","text":"DATAPACKAGENAMES\n\nDescription\n\nA list of the data package names, mainly used as clustering benchmarks.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.DEFAULT_HEAD_SPEC","page":"Dev Index","title":"DeepART.DEFAULT_HEAD_SPEC","text":"DEFAULTHEADSPEC\n\nDescription\n\nThe default shared head layers as a list of a number of nodes per layer, including the inputs and outputs.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.DEFAULT_N_PROCS_UNIX","page":"Dev Index","title":"DeepART.DEFAULT_N_PROCS_UNIX","text":"The default number of processes to start in distributed experiments on Linux.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.DEFAULT_N_PROCS_WINDOWS","page":"Dev Index","title":"DeepART.DEFAULT_N_PROCS_WINDOWS","text":"The default number of processes to start in distributed experiments on Windows.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.DEFAULT_P","page":"Dev Index","title":"DeepART.DEFAULT_P","text":"The default split ration for train/test datasets.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.DEFAULT_SHARED_SPEC","page":"Dev Index","title":"DeepART.DEFAULT_SHARED_SPEC","text":"DEFAULTSHAREDSPEC\n\nDescription\n\nThe default shared hidden layer as a list of a number of nodes per layer, including the inputs and outputs.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.DEFAULT_SHUFFLE","page":"Dev Index","title":"DeepART.DEFAULT_SHUFFLE","text":"The default shuffle flag for setting up training datasets.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.DPI","page":"Dev Index","title":"DeepART.DPI","text":"The default plotting dots-per-inch for saving.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.FLUXONEHOT","page":"Dev Index","title":"DeepART.FLUXONEHOT","text":"Flag for using Flux.onehotbatch or an internal implementation.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.FONTFAMILY","page":"Dev Index","title":"DeepART.FONTFAMILY","text":"Plotting fontfamily for all text.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.GRADIENTSCHEME","page":"Dev Index","title":"DeepART.GRADIENTSCHEME","text":"Heatmap color gradient.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.IInf","page":"Dev Index","title":"DeepART.IInf","text":"IInf\n\nDescription\n\nInfinity for integers, used for getting the minimum of training/testing values.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.JSON_INDENT","page":"Dev Index","title":"DeepART.JSON_INDENT","text":"JSON_INDENT\n\nDescription\n\nConstant for pretty indentation spacing in JSON files.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.LINEWIDTH","page":"Dev Index","title":"DeepART.LINEWIDTH","text":"Plotting linewidth.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.LOG_STATES","page":"Dev Index","title":"DeepART.LOG_STATES","text":"LOG_STATES\n\nDescription\n\nThe enumerated states that an L2 logger log can be in.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.SQUARE_SIZE","page":"Dev Index","title":"DeepART.SQUARE_SIZE","text":"Aspect ratio correction for heatmap\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.W_ARG_DOCSTING","page":"Dev Index","title":"DeepART.W_ARG_DOCSTING","text":"WARGDOCSTING\n\nDescription\n\nCommon docstring: argument for a weight vector 'W'.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.X_ARG_DOCSTRING","page":"Dev Index","title":"DeepART.X_ARG_DOCSTRING","text":"XARGDOCSTRING\n\nDescription\n\nCommon docstring: argument for a sample 'x'.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART._ARG_DRWATSON","page":"Dev Index","title":"DeepART._ARG_DRWATSON","text":"ARGDRWATSON\n\nDescription\n\nCommon docstring: the arguments to DrWatson-style directory functions.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART._COMMON_DOC","page":"Dev Index","title":"DeepART._COMMON_DOC","text":"COMMONDOC\n\nDescription\n\nDocstring prefix denoting that the constant is used as a common docstring element for other docstrings.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.n_colors","page":"Dev Index","title":"DeepART.n_colors","text":"Inferred number of colors used from the color palettes.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.pubu_9","page":"Dev Index","title":"DeepART.pubu_9","text":"Purple-blue-9 ColorScheme, inferred from the RGB values\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.pubu_9_raw","page":"Dev Index","title":"DeepART.pubu_9_raw","text":"Purple-blue-9 raw RGB values, range [0, 1].\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ylgn_9","page":"Dev Index","title":"DeepART.ylgn_9","text":"Yellow-green-9 ColorScheme, inferred from the RGB values.\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ylgn_9_raw","page":"Dev Index","title":"DeepART.ylgn_9_raw","text":"Yellow-green-9 raw RGB values, range [0, 1].\n\n\n\n\n\n","category":"constant"},{"location":"man/dev-index/#DeepART.ARTINSTART","page":"Dev Index","title":"DeepART.ARTINSTART","text":"mutable struct ARTINSTART{T<:Flux.Chain, U<:AdaptiveResonance.ARTModule} <: DeepART.DeepARTModule\n\nSummary\n\nStateful information of an ARTINSTART model.\n\nFields\n\nmodel::Flux.Chain: The shared model.\n\nhead::AdaptiveResonance.ARTModule: The heads.\n\nopts::DeepART.opts_ARTINSTART: An opts_ARTINSTART options container.\n\nn_categories::Int64: Number of category weights (F2 nodes).\n\nstats::Dict{String, Any}: The statistics dictionary for logging.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.ARTINSTART-Tuple{Any, DeepART.opts_ARTINSTART}","page":"Dev Index","title":"DeepART.ARTINSTART","text":"Constructor for a ARTINSTART taking a opts_ARTINSTART for construction options.\n\nArguments\n\nopts::opts_ARTINSTART: the opts_ARTINSTART that specifies the construction options.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.ARTINSTART-Tuple{Any}","page":"Dev Index","title":"DeepART.ARTINSTART","text":"Keyword argument constructor for a ARTINSTART module passing the keyword arguments to the opts_ARTINSTART for the module.\n\nArguments\n\nkwargs...: the options keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.AbstractAgent","page":"Dev Index","title":"DeepART.AbstractAgent","text":"abstract type AbstractAgent\n\nSummary\n\nL2 agent supertype.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.AbstractFeatures","page":"Dev Index","title":"DeepART.AbstractFeatures","text":"AbstractFeatures\n\nDescription\n\nAbstract type alias for features.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.AbstractLabels","page":"Dev Index","title":"DeepART.AbstractLabels","text":"AbstractLabels\n\nDescription\n\nAbstract type alias for labels.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.Agent","page":"Dev Index","title":"DeepART.Agent","text":"struct Agent{T} <: DeepART.AbstractAgent\n\nSummary\n\nL2 AbstractAgent struct.\n\nFields\n\nagent::Any: The DDVFA module.\n\nparams::Dict: Parameters used for l2logging.\n\nscenario::DeepART.ExperienceQueueContainer: Container for the Experience Queue.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.Agent-Tuple{Any, Any, AbstractDict, Any}","page":"Dev Index","title":"DeepART.Agent","text":"Constructor for a Agent using the scenario dictionary and optional DDVFA keyword argument options.\n\nArguments\n\nscenario::AbstractDict: l2logger scenario as a dictionary.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.Agent-Tuple{Any, Any, Any}","page":"Dev Index","title":"DeepART.Agent","text":"Creates an agent with an empty experience queue.\n\nArguments\n\nagent::T: the agent module.\nopts: the options struct used to initialize the module and set the logging params.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.ClassIncrementalDataSplit","page":"Dev Index","title":"DeepART.ClassIncrementalDataSplit","text":"struct ClassIncrementalDataSplit\n\nSummary\n\nA class-incremental variant of a DataSplit containing instead vectors of SupervisedDatasets.\n\nFields\n\ntrain::Vector{DeepART.SupervisedDataset}: The vector of training class datasets.\n\ntest::Vector{DeepART.SupervisedDataset}: The vector of testing class datasets.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.ClassIncrementalDataSplit-Tuple{DeepART.DataSplit}","page":"Dev Index","title":"DeepART.ClassIncrementalDataSplit","text":"ClassIncrementalDataSplit(\n    datasplit::DeepART.DataSplit\n) -> DeepART.ClassIncrementalDataSplit\n\n\nSummary\n\nConstructor for a ClassIncrementalDataSplit taking a normal DataSplit.\n\nArguments\n\ndata::DataSplit: a DataSplit container of a supervised train/test split.\n\nMethod List / Definition Locations\n\nClassIncrementalDataSplit(datasplit)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/ClassIncrementalDataSplit.jl:115.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.ClassIncrementalSupervisedDataset","page":"Dev Index","title":"DeepART.ClassIncrementalSupervisedDataset","text":"ClassIncrementalSupervisedDataset\n\nDescription\n\nType alias for a a class-incremental dataset as a vector of SupervisedDatasets.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.CustomLayer","page":"Dev Index","title":"DeepART.CustomLayer","text":"abstract type CustomLayer\n\nSummary\n\nAbstract type for custom Flux.jl layers.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.DataSplit","page":"Dev Index","title":"DeepART.DataSplit","text":"struct DataSplit\n\nSummary\n\nA train/test split of supervised datasets.\n\nFields\n\ntrain::DeepART.SupervisedDataset: The training portion of the dataset.\n\ntest::DeepART.SupervisedDataset: The test portion of the dataset.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.DataSplit-Tuple{AbstractArray{T} where T<:Real, AbstractArray{T} where T<:Integer, AbstractArray{T} where T<:Real, AbstractArray{T} where T<:Integer}","page":"Dev Index","title":"DeepART.DataSplit","text":"DataSplit(\n    X_train::AbstractArray{T} where T<:Real,\n    y_train::AbstractArray{T} where T<:Integer,\n    X_test::AbstractArray{T} where T<:Real,\n    y_test::AbstractArray{T} where T<:Integer;\n    shuffle\n) -> DeepART.DataSplit\n\n\nSummary\n\nConvenience constructor for a supervised DataSplit that takes each set of features x and labels yseparately.\n\nArguments\n\nX_train::AbstractFeatures: the training features.\ny_train::AbstractLabels: the training integer labels.\nX_test::AbstractFeatures: the testing features.\ny_test::AbstractLabels: the testing integer labels.\nshuffle::Bool: flag for shuffling the data, default true.\n\nMethod List / Definition Locations\n\nDataSplit(X_train, y_train, X_test, y_test; shuffle)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/DataSplit.jl:37.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.DataSplit-Tuple{AbstractArray{T} where T<:Real, AbstractArray{T} where T<:Integer}","page":"Dev Index","title":"DeepART.DataSplit","text":"DataSplit(\n    features::AbstractArray{T} where T<:Real,\n    labels::AbstractArray{T} where T<:Integer;\n    p,\n    shuffle\n) -> DeepART.DataSplit\n\n\nSummary\n\nConstructor for a DataSplit taking a set of features and options for the split ratio and shuffle flag.\n\nArguments\n\nfeatures::AbstractFeatures: the input features as an array of samples.\nlabels::AbstractLabels: the supervised labels.\np::Float: kwarg, the split ratio ∈ (0, 1), default 0.8.\nshuffle::Bool: flag for shuffling the data, default true.\n\nMethod List / Definition Locations\n\nDataSplit(features, labels; p, shuffle)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/DataSplit.jl:67.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.DataSplit-Tuple{AbstractMatrix}","page":"Dev Index","title":"DeepART.DataSplit","text":"DataSplit(\n    dataset::AbstractMatrix;\n    shuffle,\n    p\n) -> DeepART.DataSplit\n\n\nSummary\n\nConstructs a DataSplit from an existing dataset.\n\nThis assumes that the last column is the labels and all others are features.\n\nArguments\n\ndataset::AbstractMatrix: the dataset to split.\nshuffle::Bool: flag for shuffling the data, default true.\np::Float: kwarg, the split ratio ∈ (0, 1), default 0.8.\n\nMethod List / Definition Locations\n\nDataSplit(dataset; shuffle, p)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/data.jl:650.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.DeepARTModule","page":"Dev Index","title":"DeepART.DeepARTModule","text":"abstract type DeepARTModule\n\nSummary\n\nSupertype of all DeepART modules that adhere to the train! and classify usages.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.DeepHeadART","page":"Dev Index","title":"DeepART.DeepHeadART","text":"mutable struct DeepHeadART{T<:Flux.Chain, U<:Flux.Chain, V<:Flux.Chain} <: AdaptiveResonance.ARTModule\n\nSummary\n\nStateful information of a DeepHeadART module.\n\nFields\n\nF1::Flux.Chain: Feature presentation layer.\n\nF2::DeepART.MultiHeadField: Feedback expectancy layer.\n\nopts::DeepART.opts_DeepHeadART: An opts_DeepHeadART options container.\n\nconfig::AdaptiveResonance.DataConfig: Data configuration struct.\n\nlabels::Vector{Int64}: Incremental list of labels corresponding to each F2 node, self-prescribed or supervised.\n\nT::Vector{Float64}: Activation values for every weight for a given sample.\n\nM::Vector{Float64}: Match values for every weight for a given sample.\n\nn_instance::Vector{Int64}: Number of weights associated with each category.\n\nn_categories::Int64: Number of category weights (F2 nodes).\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.DeepHeadART-Tuple{DeepART.opts_DeepHeadART}","page":"Dev Index","title":"DeepART.DeepHeadART","text":"Constructor for a DeepHeadART taking a opts_DeepHeadART for construction options.\n\nArguments\n\nopts::opts_DeepHeadART: the opts_DeepHeadART that specifies the construction options.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.DeepHeadART-Tuple{}","page":"Dev Index","title":"DeepART.DeepHeadART","text":"Keyword argument constructor for a DeepHeadART module passing the keyword arguments to the opts_DeepHeadART for the module.\n\nArguments\n\nkwargs...: the options keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.DeeperART","page":"Dev Index","title":"DeepART.DeeperART","text":"struct DeeperART{T<:Flux.Chain, U<:Flux.Chain}\n\nSummary\n\nStateful information of a DeeperART module.\n\nFields\n\nF1::Flux.Chain: Feature presentation layer.\n\nF2::Flux.Chain: Feedback expectancy layer.\n\nopts::DeepART.opts_DeeperART: An opts_DeeperART options container.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.DeeperART-Tuple{DeepART.opts_DeeperART}","page":"Dev Index","title":"DeepART.DeeperART","text":"Constructor for a DeeperART taking a opts_DeeperART for construction options.\n\nArguments\n\nopts::opts_DeeperART: the opts_DeeperART that specifies the construction options.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.DeeperART-Tuple{}","page":"Dev Index","title":"DeepART.DeeperART","text":"Keyword argument constructor for a DeeperART module passing the keyword arguments to the opts_DeeperART for the module.\n\nArguments\n\nkwargs...: the options keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.DenseSpecifier","page":"Dev Index","title":"DeepART.DenseSpecifier","text":"DenseSpecifier\n\nDescription\n\nA specifier for the number of nodes per layer in a dense feedforward network.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.EWC","page":"Dev Index","title":"DeepART.EWC","text":"mutable struct EWC <: Optimisers.AbstractRule\n\nSummary\n\nThe parameters if an EWCIncremental optimiser.\n\nFields\n\neta::Float64: Default: 0.01\nlambda::Float64: Default: 0.1\ndecay::Float64: Default: 0.9\nalpha::Float64: Default: 0.1\nnew_task::Bool: Default: true\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.EWCLossOpts","page":"Dev Index","title":"DeepART.EWCLossOpts","text":"mutable struct EWCLossOpts\n\nSummary\n\nOptions for the EWCLossState.\n\nFields\n\nlambda::Float64: EWC regularization strength.  Default: 1.0\nalpha::Float64: EWC FIM update ratio.  Default: 0.1\nfirst_task::Bool: Flag for if the first task is being trained upon.  Default: true\nnormalize::Bool: Flag for if the FIM should be normalized.  Default: true\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.EWCLossState","page":"Dev Index","title":"DeepART.EWCLossState","text":"struct EWCLossState\n\nSummary\n\nCustom state for the EWCState optimiser.\n\nFields\n\nFIM::Any: The Fisher Information Matrix (FIM) approximation.\n\nold_params::Any: The 'old parameters' that the FIM are computed on.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.EWCLossState-Tuple{DeepART.EWCLossState, DeepART.EWCLossOpts, Any, Any, Any}","page":"Dev Index","title":"DeepART.EWCLossState","text":"EWCLossState(\n    state::DeepART.EWCLossState,\n    o::DeepART.EWCLossOpts,\n    x,\n    dx,\n    n_samples\n) -> DeepART.EWCLossState\n\n\nSummary\n\nConstructor for a new EWCLossState given an old state, the options, parameters, and the gradient.\n\nArguments\n\nstate::EWCLossState: the old state.\no::EWCLossOpts: the options for the EWC loss.\nx: the flat network parameters.\ndx: the gradient of the loss with respect to the parameters.\n\nMethod List / Definition Locations\n\nEWCLossState(state, o, x, dx, n_samples)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/Optimisers/EWCLoss.jl:88.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.EWCLossState-Tuple{}","page":"Dev Index","title":"DeepART.EWCLossState","text":"EWCLossState() -> DeepART.EWCLossState\n\n\nSummary\n\nEmpty constructor for the EWCLossState.\n\nMethod List / Definition Locations\n\nEWCLossState()\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/Optimisers/EWCLoss.jl:67.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.EWCState","page":"Dev Index","title":"DeepART.EWCState","text":"struct EWCState\n\nSummary\n\nCustom state for the EWCState optimiser.\n\nFields\n\nFIM::Any: The Fisher Information Matrix (FIM) approximation.\n\nold_params::Any: The 'old parameters' that the FIM are computed on.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.Experience","page":"Dev Index","title":"DeepART.Experience","text":"struct Experience\n\nSummary\n\nExperience block for an agent.\n\nTaken from l2logger_template.\n\nFields\n\ntask_name::String: The task name.\n\nseq_nums::DeepART.SequenceNums: The sequence numbers (block and experience count).\n\nblock_type::String: The block type, valid values are ∈ [\"train\", \"test\"].\n\nupdate_model::Bool: Flag for updating the model (i.e., true is to train, false is to classify).\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.Experience-Tuple{AbstractString, DeepART.SequenceNums, AbstractString}","page":"Dev Index","title":"DeepART.Experience","text":"Experience(\n    task_name::AbstractString,\n    seq_nums::DeepART.SequenceNums,\n    block_type::AbstractString\n) -> DeepART.Experience\n\n\nSummary\n\nConstructs an Experience, setting the update_model field based upon the block type.\n\nArguments\n\ntask_name::AbstractString: the name of the current task.\nseq_nums::SequenceNums: the block and experience number of the Experience.\nblock_type::AbstractString: the block type ∈ [\"train\", \"test\"]. Using \"train\" sets update_model to true, \"test\" to false.\n\nMethod List / Definition Locations\n\nExperience(task_name, seq_nums, block_type)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/experience.jl:76.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.ExperienceQueue","page":"Dev Index","title":"DeepART.ExperienceQueue","text":"ExperienceQueue\n\nDescription\n\nAlias for a queue of Experiences.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.ExperienceQueueContainer","page":"Dev Index","title":"DeepART.ExperienceQueueContainer","text":"struct ExperienceQueueContainer\n\nSummary\n\nContainer for the ExperienceQueue and some statistics about it.\n\nFields\n\nqueue::DataStructures.Deque{DeepART.Experience}: The ExperienceQueue itself.\n\nstats::Dict{String, Any}: The statistics about the queue. NOTE These statistics reflect the queue at construction, not after any processing.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.ExperienceQueueContainer-Tuple{AbstractDict}","page":"Dev Index","title":"DeepART.ExperienceQueueContainer","text":"ExperienceQueueContainer(\n    scenario_dict::AbstractDict\n) -> DeepART.ExperienceQueueContainer\n\n\nSummary\n\nCreates a queue of Experiences from the scenario dictionary.\n\nArguments\n\nscenario_dict::AbstractDict: the scenario dictionary.\n\nMethod List / Definition Locations\n\nExperienceQueueContainer(scenario_dict)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/scenario.jl:138.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.ExperienceQueueContainer-Tuple{}","page":"Dev Index","title":"DeepART.ExperienceQueueContainer","text":"ExperienceQueueContainer(\n\n) -> DeepART.ExperienceQueueContainer\n\n\nSummary\n\nCreates an empty ExperienceQueueContainer with an empty queue and zeroed stats.\n\nMethod List / Definition Locations\n\nExperienceQueueContainer()\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/scenario.jl:113.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.FIA","page":"Dev Index","title":"DeepART.FIA","text":"mutable struct FIA{T<:Flux.Chain} <: DeepART.DeepARTModule\n\nSummary\n\nStateful information of an FIA model.\n\nFields\n\nmodel::Flux.Chain: The shared model.\n\nopts::DeepART.opts_FIA: An opts_FIA options container.\n\nstats::Dict{String, Any}: The statistics dictionary for logging.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.FIA-Tuple{Any, DeepART.opts_FIA}","page":"Dev Index","title":"DeepART.FIA","text":"Constructor for a FIA taking a opts_FIA for construction options.\n\nArguments\n\nopts::opts_FIA: the opts_FIA that specifies the construction options.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.FIA-Tuple{Any}","page":"Dev Index","title":"DeepART.FIA","text":"Keyword argument constructor for a FIA module passing the keyword arguments to the opts_FIA for the module.\n\nArguments\n\nkwargs...: the options keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.FluxFloat","page":"Dev Index","title":"DeepART.FluxFloat","text":"Definition of the precision used for Flux computations; used for loading data and constructing objects depending on Flux elements.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.IEWC","page":"Dev Index","title":"DeepART.IEWC","text":"mutable struct IEWC <: Optimisers.AbstractRule\n\nSummary\n\nThe parameters if an IEWC optimiser.\n\nFields\n\neta::Float64: Default: 0.01\nlambda::Float64: Default: 0.1\ndecay::Float64: Default: 0.9\nalpha::Float64: Default: 0.1\nnew_task::Bool: Default: true\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.IEWCState","page":"Dev Index","title":"DeepART.IEWCState","text":"mutable struct IEWCState{T<:AbstractArray, U<:AbstractArray}\n\nSummary\n\nCustom state for the IEWC optimiser.\n\nFields\n\nFIM::Vector{T} where T<:AbstractArray: The Fisher Information Matrix (FIM) approximation.\n\nold_params::Vector{U} where U<:AbstractArray: The 'old parameters'.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.INSTART","page":"Dev Index","title":"DeepART.INSTART","text":"mutable struct INSTART{T<:Flux.Chain, U<:Flux.Chain} <: DeepART.DeepARTModule\n\nSummary\n\nStateful information of an INSTART model.\n\nFields\n\nmodel::Flux.Chain: The shared model.\n\nheads::Vector{U} where U<:Flux.Chain: The heads.\n\nopts::DeepART.opts_INSTART: An opts_INSTART options container.\n\nlabels::Vector{Int64}: Incremental list of labels corresponding to each F2 node, self-prescribed or supervised.\n\nT::Vector{Float64}: Activation values for every weight for a given sample.\n\nM::Vector{Float64}: Match values for every weight for a given sample.\n\nn_instance::Vector{Int64}: Number of weights associated with each category.\n\nn_categories::Int64: Number of category weights (F2 nodes).\n\nstats::Dict{String, Any}: The statistics dictionary for logging.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.INSTART-Tuple{Any, DeepART.opts_INSTART}","page":"Dev Index","title":"DeepART.INSTART","text":"Constructor for a INSTART taking a opts_INSTART for construction options.\n\nArguments\n\nopts::opts_INSTART: the opts_INSTART that specifies the construction options.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.INSTART-Tuple{Any}","page":"Dev Index","title":"DeepART.INSTART","text":"Keyword argument constructor for a INSTART module passing the keyword arguments to the opts_INSTART for the module.\n\nArguments\n\nkwargs...: the options keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.MultiHeadField","page":"Dev Index","title":"DeepART.MultiHeadField","text":"struct MultiHeadField{T<:Flux.Chain, J<:Flux.Chain}\n\nSummary\n\nContainer for a multihead DeeperART neural network field.\n\nFields\n\nshared::Flux.Chain: The single shared layers object.\n\nheads::Vector{J} where J<:Flux.Chain: The heads of the network as a list of layers.\n\nopts::DeepART.opts_MultiHeadField: Container of the opts_MultiHeadField that created this field.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.MultiHeadField-Tuple{DeepART.opts_MultiHeadField}","page":"Dev Index","title":"DeepART.MultiHeadField","text":"Constructor for a MultiHeadField taking a opts_MultiHeadField for construction options.\n\nArguments\n\nopts::opts_MultiHeadField: the opts_MultiHeadField that specifies the construction options.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.MultiHeadField-Tuple{}","page":"Dev Index","title":"DeepART.MultiHeadField","text":"Keyword argument constructor for a MultiHeadField module passing the keyword arguments to the opts_MultiHeadField for the module.\n\nArguments\n\nkwargs...: the options keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.SequenceNums","page":"Dev Index","title":"DeepART.SequenceNums","text":"struct SequenceNums\n\nSummary\n\nSequence numbers for a block and Experience.\n\nTaken from l2logger_template.\n\nFields\n\nblock_num::Int64: The block number.\n\nexp_num::Int64: The experience number.\n\ntask_num::Int64: The task-specific count.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.SimpleDeepART","page":"Dev Index","title":"DeepART.SimpleDeepART","text":"struct SimpleDeepART{T<:Flux.Chain}\n\nSummary\n\nContainer for a simple DeepART module.\n\nFields\n\nmodel::Flux.Chain: The Flux.Chain feature extractor model.\n\nart::AdaptiveResonance.FuzzyART: The FuzzyART module.\n\nopts::DeepART.opts_SimpleDeepART: The opts_SimpleDeepART options and flags for the module.\n\nmodel_dim::Int64: The model output dimension for reference.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.SimpleDeepART-Tuple{DeepART.opts_SimpleDeepART}","page":"Dev Index","title":"DeepART.SimpleDeepART","text":"Main constructor for a SimpleDeepART module.\n\nArguments\n\nopts::opts_SimpleDeepART: the [opts_SimpleDeepART] options driving the construction.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.SimpleDeepART-Tuple{}","page":"Dev Index","title":"DeepART.SimpleDeepART","text":"Keyword argument constructor for a SimpleDeepART module passing the keyword arguments to the opts_SimpleDeepART for the module.\n\nArguments\n\nkwargs...: the options keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.SingleFuzzy","page":"Dev Index","title":"DeepART.SingleFuzzy","text":"struct SingleFuzzy{M<:(AbstractVector)} <: DeepART.CustomLayer\n\nSummary\n\nA single FuzzyART-like layer for a Flux.jl model, implemented for use in a vector container.\n\nFields\n\nweight::AbstractVector: The weight vector for the layer.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.SingleFuzzy-Tuple{AbstractVecOrMat}","page":"Dev Index","title":"DeepART.SingleFuzzy","text":"Inference definition for a SingleFuzzy layer computing the activation and match values.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.SingleFuzzy-Tuple{Integer}","page":"Dev Index","title":"DeepART.SingleFuzzy","text":"Constructor for a SingleFuzzy layer taking the inut dimension and an optional weight initialization function.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.SizeTuple","page":"Dev Index","title":"DeepART.SizeTuple","text":"SizeTuple\n\nDescription\n\nType alias for the model input size tuple.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.StatsDict","page":"Dev Index","title":"DeepART.StatsDict","text":"StatsDict\n\nDescription\n\nAlias for a statistics dictionary being string keys mapping to any object.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.SupervisedDataset","page":"Dev Index","title":"DeepART.SupervisedDataset","text":"struct SupervisedDataset{T<:(AbstractArray{T} where T<:Real), U<:(AbstractArray{T} where T<:Integer)}\n\nSummary\n\nA struct containing a supervised set of features in a matrix x mapping to integer labels y.\n\nFields\n\nx::AbstractArray{T} where T<:Real: A set of features.\n\ny::AbstractArray{T} where T<:Integer: The labels corresponding to each feature.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.WTANet","page":"Dev Index","title":"DeepART.WTANet","text":"struct WTANet{T<:Flux.Chain, U<:NamedTuple}\n\nSummary\n\nContainer for the stateful information of a WTANet module.\n\nFields\n\nmodel::Flux.Chain: The feedforward network.\n\noptim::NamedTuple: Container for the optimiser.\n\nopts::DeepART.opts_WTANet: The options for construction and usage.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.WTANet-Tuple{DeepART.opts_WTANet}","page":"Dev Index","title":"DeepART.WTANet","text":"Constructor for a WTANet taking a opts_WTANet for construction options.\n\nArguments\n\nopts::opts_WTANet: the opts_WTANet that specifies the construction options.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.WTANet-Tuple{}","page":"Dev Index","title":"DeepART.WTANet","text":"Keyword argument constructor for a WTANet module passing the keyword arguments to the opts_WTANet for the module.\n\nArguments\n\nkwargs...: the options keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.opts_ARTINSTART","page":"Dev Index","title":"DeepART.opts_ARTINSTART","text":"struct opts_ARTINSTART\n\nSummary\n\nOptions container for a ARTINSTART module.\n\nFields\n\nrho::Float64: The vigilance parameter of the ARTINSTART module, rho ∈ (0.0, 1.0].  Default: 0.6\neta::Float64: Instar learning rate.  Default: 0.1\nalpha::Any: Choice parameter: alpha > 0.  Default: 0.001\nbeta::Any: Deep model learning parameter: beta ∈ (0, 1].  Default: 1.0\nbeta_s::Any: Head learning parameter: beta ∈ (0, 1].  Default: 0.01\nuncommitted::Bool: Flag to use an uncommitted node when learning.\nIf true, new weights are created with ones(dim) and learn on the complement-coded sample. If false, fast-committing is used where the new weight is simply the complement-coded sample.  Default: false\nhead_dim::Int64: The dimension of the interaction field.  Default: 128\ngpu::Bool: Flag for pushing the models to the GPU.  Default: false\nupdate::String: Update method ∈ [\"art\", \"instar\"].  Default: art\nsoftwta::Bool: Soft WTA update rule flag.  Default: false\nleader::Bool: Flag for the use of a leader neuron, which negates the use of the SFAM head.  Default: false\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.opts_DeepHeadART","page":"Dev Index","title":"DeepART.opts_DeepHeadART","text":"struct opts_DeepHeadART\n\nSummary\n\nOptions container for a DeepHeadART module.\n\nFields\n\nrho::Float64: The vigilance parameter of the DeepHeadART module, rho ∈ (0.0, 1.0].  Default: 0.6\neta::Float64: Instar learning rate.  Default: 0.1\nalpha::Any: Choice parameter: alpha > 0.  Default: 0.001\nbeta::Any: Learning parameter: beta ∈ (0, 1].  Default: 1.0\nF1_spec::Vector{Int64}: Simple dense specifier for the F1 layer.  Default: [2, 5, 3]\nF2_shared::Vector{Int64}: Shared dense specifier for the F2 layer.  Default: [3, 6, 3]\nF2_heads::Vector{Int64}: Shared dense specifier for the F2 layer.  Default: [3, 5, 3]\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.opts_DeeperART","page":"Dev Index","title":"DeepART.opts_DeeperART","text":"struct opts_DeeperART\n\nSummary\n\nOptions container for a DeeperART module.\n\nFields\n\nrho::Float64: The vigilance parameter of the DeeperART module, rho ∈ (0.0, 1.0].  Default: 0.6\nF1_spec::Vector{Int64}: Simple dense specifier for the F1 layer.  Default: [2, 5, 3]\nF2_spec::Vector{Int64}: Simple dense specifier for the F2 layer.  Default: [3, 5, 3]\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.opts_FIA","page":"Dev Index","title":"DeepART.opts_FIA","text":"struct opts_FIA\n\nSummary\n\nOptions container for a FIA module.\n\nFields\n\nrho::Float32: The vigilance parameter of the FIA module, rho ∈ (0.0, 1.0].  Default: 0.6\neta::Float32: Instar learning rate.  Default: 0.1\nalpha::Float32: Choice parameter: alpha > 0.  Default: 0.001\nbeta::Float32: Deep model learning parameter: beta ∈ (0, 1].  Default: 1.0\nuncommitted::Bool: Flag to use an uncommitted node when learning.\nIf true, new weights are created with ones(dim) and learn on the complement-coded sample. If false, fast-committing is used where the new weight is simply the complement-coded sample.  Default: false\ngpu::Bool: Flag for pushing the models to the GPU.  Default: false\nupdate::String: Update method ∈ [\"art\", \"instar\"].  Default: art\nsoftwta::Bool: Soft WTA update rule flag.  Default: false\nleader::Bool: Flag for the use of a leader neuron, which negates the use of the SFAM head.  Default: false\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.opts_INSTART","page":"Dev Index","title":"DeepART.opts_INSTART","text":"struct opts_INSTART\n\nSummary\n\nOptions container for a INSTART module.\n\nFields\n\nrho::Float64: The vigilance parameter of the INSTART module, rho ∈ (0.0, 1.0].  Default: 0.6\neta::Float64: Instar learning rate.  Default: 0.1\nalpha::Any: Choice parameter: alpha > 0.  Default: 0.001\nbeta::Any: Learning parameter: beta ∈ (0, 1].  Default: 1.0\nuncommitted::Bool: Flag to use an uncommitted node when learning.\nIf true, new weights are created with ones(dim) and learn on the complement-coded sample. If false, fast-committing is used where the new weight is simply the complement-coded sample.  Default: false\nhead_dim::Int64: The dimension of the interaction field.  Default: 128\ngpu::Bool: Flag for pushing the models to the GPU.  Default: false\nupdate::String: Update method ∈ [\"art\", \"instar\"].  Default: art\nsoftwta::Bool: Soft WTA update rule flag.  Default: false\nhead::String: Head layer type ∈ [\"fuzzy\", \"hypersphere\"].  Default: fuzzy\nleader::Bool: Flag for the use of a leader neuron, which negates the use of the SFAM head.  Default: false\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.opts_MultiHeadField","page":"Dev Index","title":"DeepART.opts_MultiHeadField","text":"struct opts_MultiHeadField\n\nSummary\n\nThe options container for a MultiHeadField module.\n\nFields\n\nshared_spec::Vector{Int64}: The shared hidden layer as a list of a number of nodes per layer, including the inputs and outputs.  Default: DEFAULTSHAREDSPEC\nhead_spec::Vector{Int64}: The head layers specifier as a list of a number of nodes per layer, including the inputs and outputs.  Default: DEFAULTHEADSPEC\neta::Float64: Instar learning rate.  Default: 0.1\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.opts_SimpleDeepART","page":"Dev Index","title":"DeepART.opts_SimpleDeepART","text":"struct opts_SimpleDeepART\n\nSummary\n\nOptions for the construction and usage of a SimpleDeepART module.\n\nFields\n\nsize_tuple::Tuple: The model input size tuple.  Default: (28, 28, 1, 1)\nconv::Bool: Flag for if the model is convolutional.  Default: true\nopts_fuzzyart::AdaptiveResonance.opts_FuzzyART: The FuzzyART module options.  Default: opts_FuzzyART()\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#DeepART.opts_WTANet","page":"Dev Index","title":"DeepART.opts_WTANet","text":"struct opts_WTANet\n\nSummary\n\nOptions for the construction and usage of a WTANet module.\n\nFields\n\nrho::Float64: The vigilance parameter of the WTANet module, rho ∈ (0.0, 1.0].  Default: 0.6\noptimiser::Symbol: Name of the optimiser to use.  Default: :Descent\nmodel_spec::Vector{Int64}: Simple dense specifier for the model.  Default: [2, 10, 10]\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#Base.getindex-Tuple{DeepART.SupervisedDataset, Integer}","page":"Dev Index","title":"Base.getindex","text":"getindex(\n    data::DeepART.SupervisedDataset,\n    ix::Integer\n) -> Tuple{Any, Any}\n\n\nSummary\n\nOverload for getting a UnitRange of a SupervisedDataset.\n\nMethod List / Definition Locations\n\ngetindex(data, ix)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/train-test.jl:15.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#Base.getindex-Tuple{DeepART.SupervisedDataset, UnitRange}","page":"Dev Index","title":"Base.getindex","text":"getindex(\n    data::DeepART.SupervisedDataset,\n    ix::UnitRange\n) -> Tuple{Any, Any}\n\n\nSummary\n\nOverload for getting a UnitRange of a SupervisedDataset.\n\nMethod List / Definition Locations\n\ngetindex(data, ix)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/train-test.jl:25.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#Base.length-Tuple{DeepART.SupervisedDataset}","page":"Dev Index","title":"Base.length","text":"length(data::DeepART.SupervisedDataset) -> Any\n\n\nSummary\n\nOverload for the length of a SupervisedDataset.\n\nMethod List / Definition Locations\n\nlength(data)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/train-test.jl:44.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#Base.show-Tuple{IO, DataStructures.Deque{DeepART.Experience}}","page":"Dev Index","title":"Base.show","text":"show(\n    io::IO,\n    queue::DataStructures.Deque{DeepART.Experience}\n)\n\n\nSummary\n\nOverload of the show function for ExperienceQueue.\n\nArguments\n\nio::IO: the current IO stream.\ncont::ExperienceQueueContainer: the ExperienceQueueContainer to print/display.\n\nMethod List / Definition Locations\n\nshow(io, queue)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/scenario.jl:160.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#Base.show-Tuple{IO, DeepART.Agent}","page":"Dev Index","title":"Base.show","text":"show(io::IO, agent::DeepART.Agent)\n\n\nSummary\n\nOverload of the show function for Agent.\n\nArguments\n\nio::IO: the current IO stream.\ncont::AbstractAgent: the Agent to print/display.\n\nMethod List / Definition Locations\n\nshow(io, agent)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/agents.jl:108.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#Base.show-Tuple{IO, DeepART.ClassIncrementalDataSplit}","page":"Dev Index","title":"Base.show","text":"show(io::IO, ds::DeepART.ClassIncrementalDataSplit)\n\n\nSummary\n\nOverload of the show function for ClassIncrementalDataSplit.\n\nArguments\n\nio::IO: the current IO stream.\nds::ClassIncrementalDataSplit: the ClassIncrementalDataSplit to print/display.\n\nMethod List / Definition Locations\n\nshow(io, ds)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/ClassIncrementalDataSplit.jl:246.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#Base.show-Tuple{IO, DeepART.DataSplit}","page":"Dev Index","title":"Base.show","text":"show(io::IO, ds::DeepART.DataSplit)\n\n\nSummary\n\nOverload of the show function for DataSplit.\n\nArguments\n\nio::IO: the current IO stream.\nfield::DataSplit: the DataSplit to print/display.\n\nMethod List / Definition Locations\n\nshow(io, ds)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/DataSplit.jl:158.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#Base.show-Tuple{IO, DeepART.DeepHeadART}","page":"Dev Index","title":"Base.show","text":"show(io::IO, field::DeepART.DeepHeadART)\n\n\nSummary\n\nOverload of the show function for DeepHeadART.\n\nArguments\n\nio::IO: the current IO stream.\nfield::DeepHeadART: the DeepHeadART to print/display.\n\nMethod List / Definition Locations\n\nshow(io, field)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/DeepHeadART.jl:517.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#Base.show-Tuple{IO, DeepART.DeeperART}","page":"Dev Index","title":"Base.show","text":"show(io::IO, field::DeepART.DeeperART)\n\n\nSummary\n\nOverload of the show function for DeeperART.\n\nArguments\n\nio::IO: the current IO stream.\nfield::DeeperART: the DeeperART to print/display.\n\nMethod List / Definition Locations\n\nshow(io, field)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/DeeperART.jl:109.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#Base.show-Tuple{IO, DeepART.EWCLossState}","page":"Dev Index","title":"Base.show","text":"show(io::IO, state::DeepART.EWCLossState)\n\n\nSummary\n\nOverload of the show function for EWCLossState.\n\nArguments\n\nio::IO: the current IO stream.\nfield::EWCLossState: the EWCLossState to print/display.\n\nMethod List / Definition Locations\n\nshow(io, state)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/Optimisers/EWCLoss.jl:143.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#Base.show-Tuple{IO, DeepART.EWCState}","page":"Dev Index","title":"Base.show","text":"show(io::IO, state::DeepART.EWCState)\n\n\nSummary\n\nOverload of the show function for EWCState.\n\nArguments\n\nio::IO: the current IO stream.\nfield::EWCState: the EWCState to print/display.\n\nMethod List / Definition Locations\n\nshow(io, state)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/Optimisers/EWC.jl:91.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#Base.show-Tuple{IO, DeepART.ExperienceQueueContainer}","page":"Dev Index","title":"Base.show","text":"show(io::IO, cont::DeepART.ExperienceQueueContainer)\n\n\nSummary\n\nOverload of the show function for ExperienceQueueContainer.\n\nArguments\n\nio::IO: the current IO stream.\ncont::ExperienceQueueContainer: the ExperienceQueueContainer to print/display.\n\nMethod List / Definition Locations\n\nshow(io, cont)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/scenario.jl:178.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#Base.show-Tuple{IO, DeepART.IEWCState}","page":"Dev Index","title":"Base.show","text":"show(io::IO, state::DeepART.IEWCState)\n\n\nSummary\n\nOverload of the show function for IEWCState.\n\nArguments\n\nio::IO: the current IO stream.\nfield::IEWCState: the IEWCState to print/display.\n\nMethod List / Definition Locations\n\nshow(io, state)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/Optimisers/IEWC.jl:92.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#Base.show-Tuple{IO, DeepART.MultiHeadField}","page":"Dev Index","title":"Base.show","text":"show(io::IO, field::DeepART.MultiHeadField)\n\n\nSummary\n\nOverload of the show function for MultiHeadField.\n\nArguments\n\nio::IO: the current IO stream.\nfield::MultiHeadField: the MultiHeadField to print/display.\n\nMethod List / Definition Locations\n\nshow(io, field)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/MultiHeadField.jl:227.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#Base.show-Tuple{IO, DeepART.SingleFuzzy}","page":"Dev Index","title":"Base.show","text":"show(io::IO, l::DeepART.SingleFuzzy)\n\n\nSummary\n\nPretty print definition for a SingleFuzzy layer.\n\nMethod List / Definition Locations\n\nshow(io, l)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/Layers/FuzzyLayer.jl:66.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#Base.show-Tuple{IO, DeepART.SupervisedDataset}","page":"Dev Index","title":"Base.show","text":"show(io::IO, ds::DeepART.SupervisedDataset)\n\n\nSummary\n\nOverload of the show function for SupervisedDataset.\n\nArguments\n\nio::IO: the current IO stream.\nfield::SupervisedDataset: the SupervisedDataset to print/display.\n\nMethod List / Definition Locations\n\nshow(io, ds)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/SupervisedDataset.jl:157.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.CC-Tuple{}","page":"Dev Index","title":"DeepART.CC","text":"CC() -> typeof(DeepART.complement_code)\n\n\nSummary\n\nConstructs a complement coding layer as a simple complement coding function.\n\nMethod List / Definition Locations\n\nCC()\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/Layers/CCLayer.jl:13.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.CCConv-Tuple{}","page":"Dev Index","title":"DeepART.CCConv","text":"CCConv() -> typeof(DeepART.complement_code_conv)\n\n\nSummary\n\nConstructs a complement coding layer as a simple function for convolutional layers.\n\nMethod List / Definition Locations\n\nCCConv()\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/Layers/CCLayer.jl:35.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.L2TaskIncrementalDataSplit-Tuple{DeepART.ClassIncrementalDataSplit, Vector{Vector{Int64}}}","page":"Dev Index","title":"DeepART.L2TaskIncrementalDataSplit","text":"L2TaskIncrementalDataSplit(\n    datasplit::DeepART.ClassIncrementalDataSplit,\n    groupings::Vector{Vector{Int64}};\n    shuffle\n) -> Tuple{DeepART.ClassIncrementalDataSplit, Dict{String, Int64}}\n\n\nSummary\n\nCombines classes in the training and testing datasets of a ClassIncrementalDataSplit according to the provided groupings.\n\nArguments\n\ndatasplit::ClassIncrementalDataSplit: a ClassIncrementalDataSplit to combine elements of according to the groupings\ngroupings::Vector{Vector{Int}}: the set of groupings to perform.\nshuffle::Bool: flag for shuffling the data, default true.\n\nMethod List / Definition Locations\n\nL2TaskIncrementalDataSplit(datasplit, groupings; shuffle)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/ClassIncrementalDataSplit.jl:217.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.TaskIncrementalDataSplit-Tuple{DeepART.ClassIncrementalDataSplit, Vector{Vector{Int64}}}","page":"Dev Index","title":"DeepART.TaskIncrementalDataSplit","text":"TaskIncrementalDataSplit(\n    datasplit::DeepART.ClassIncrementalDataSplit,\n    groupings::Vector{Vector{Int64}};\n    shuffle\n) -> DeepART.ClassIncrementalDataSplit\n\n\nSummary\n\nCombines classes in the training and testing datasets of a ClassIncrementalDataSplit according to the provided groupings.\n\nArguments\n\ndatasplit::ClassIncrementalDataSplit: a ClassIncrementalDataSplit to combine elements of according to the groupings\ngroupings::Vector{Vector{Int}}: the set of groupings to perform.\nshuffle::Bool: flag for shuffling the data, default true.\n\nMethod List / Definition Locations\n\nTaskIncrementalDataSplit(datasplit, groupings; shuffle)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/ClassIncrementalDataSplit.jl:192.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.W_norm-Tuple{AbstractVector{T} where T<:Real}","page":"Dev Index","title":"DeepART.W_norm","text":"W_norm(W::AbstractVector{T} where T<:Real) -> Any\n\n\nSummary\n\nLow-level common function for computing the 1-norm of just the weight vector.\n\nArguments\n\nW::RealVector: the weight vector to use.\n\nMethod List / Definition Locations\n\nW_norm(W)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/common.jl:160.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.add_node!-Tuple{DeepART.DeepHeadART, AbstractArray{T} where T<:Real}","page":"Dev Index","title":"DeepART.add_node!","text":"add_node!(\n    art::DeepART.DeepHeadART,\n    x::AbstractArray{T} where T<:Real\n)\n\n\nSummary\n\nAdds a node to the F2 layer of the DeepHeadART module.\n\nArguments\n\nart::DeepHeadART: the DeepHeadART module.\nx::RealArray: the input data.\n\nMethod List / Definition Locations\n\nadd_node!(art, x)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/DeepHeadART.jl:228.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.add_node!-Tuple{DeepART.MultiHeadField}","page":"Dev Index","title":"DeepART.add_node!","text":"add_node!(field::DeepART.MultiHeadField)\n\n\nSummary\n\nAdds a node to the head of a MultiHeadField.\n\nArguments\n\nfield::MultiHeadField: the MultiHeadField object.\nx::RealArray: the input data.\n\nMethod List / Definition Locations\n\nadd_node!(field)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/MultiHeadField.jl:182.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.art_learn_basic-Tuple{Any, Any, Any}","page":"Dev Index","title":"DeepART.art_learn_basic","text":"art_learn_basic(x, W, beta) -> Any\n\n\nSummary\n\nBasic FuzzyART learning rule.\n\nMethod List / Definition Locations\n\nart_learn_basic(x, W, beta)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/common.jl:58.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.art_learn_cast-Tuple{Any, Any, Any}","page":"Dev Index","title":"DeepART.art_learn_cast","text":"art_learn_cast(x, W, beta) -> Any\n\n\nSummary\n\nFuzzyART learning rule casting a vector input to a matrix of weights.\n\nMethod List / Definition Locations\n\nart_learn_cast(x, W, beta)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/common.jl:74.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.art_learn_head-Tuple{Any, Any, Any}","page":"Dev Index","title":"DeepART.art_learn_head","text":"art_learn_head(xf, head, beta)\n\n\nSummary\n\nFuzzyART learning modification for networks using custom CC-SimpleFuzzy head layers.\n\nMethod List / Definition Locations\n\nart_learn_head(xf, head, beta)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/INSTART.jl:243.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.basic_activation-Tuple{AdaptiveResonance.ARTModule, AbstractVector{T} where T<:Real, AbstractVector{T} where T<:Real}","page":"Dev Index","title":"DeepART.basic_activation","text":"basic_activation(\n    art::AdaptiveResonance.ARTModule,\n    x::AbstractVector{T} where T<:Real,\n    W::AbstractVector{T} where T<:Real\n) -> Any\n\n\nSummary\n\nSimplified FuzzyARTMAP activation function.\n\nArguments\n\nart::ARTModule: the ARTModule module.\nx::RealVector: the input sample vector to use.\nW::RealVector: the weight vector to use.\n\nMethod List / Definition Locations\n\nbasic_activation(art, x, W)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/common.jl:179.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.basic_match-Tuple{AdaptiveResonance.ARTModule, AbstractVector{T} where T<:Real, AbstractVector{T} where T<:Real}","page":"Dev Index","title":"DeepART.basic_match","text":"basic_match(\n    art::AdaptiveResonance.ARTModule,\n    x::AbstractVector{T} where T<:Real,\n    W::AbstractVector{T} where T<:Real\n) -> Any\n\n\nSummary\n\nBasic match function.\n\nArguments\n\nart::ARTModule: the ARTModule module.\nx::RealVector: the input sample vector to use.\nW::RealVector: the weight vector to use.\n\nMethod List / Definition Locations\n\nbasic_match(art, x, W)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/common.jl:169.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.basic_test-Tuple{Union{AdaptiveResonance.ARTModule, DeepART.DeepARTModule, DeepART.Hebb.BlockNet, DeepART.Hebb.HebbModel}, DeepART.SupervisedDataset}","page":"Dev Index","title":"DeepART.basic_test","text":"basic_test(\n    art::Union{AdaptiveResonance.ARTModule, DeepART.DeepARTModule, DeepART.Hebb.BlockNet, DeepART.Hebb.HebbModel},\n    data::DeepART.SupervisedDataset;\n    display,\n    desc\n) -> Vector{Int64}\n\n\nSummary\n\nTask-homogenous testing loop for a DeepARTModule model.\n\nArguments\n\nart::CommonARTModule: the CommonARTModule model.\nn_test::Integer: the number of testing iterations.\n\nMethod List / Definition Locations\n\nbasic_test(art, data; display, desc)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/train-test.jl:157.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.basic_train!-Tuple{Union{AdaptiveResonance.ARTModule, DeepART.DeepARTModule, DeepART.Hebb.BlockNet, DeepART.Hebb.HebbModel}, DeepART.SupervisedDataset}","page":"Dev Index","title":"DeepART.basic_train!","text":"basic_train!(\n    art::Union{AdaptiveResonance.ARTModule, DeepART.DeepARTModule, DeepART.Hebb.BlockNet, DeepART.Hebb.HebbModel},\n    data::DeepART.SupervisedDataset;\n    display,\n    desc\n) -> Vector{Int64}\n\n\nSummary\n\nTask-homogenous training loop for a DeepART model.\n\nArguments\n\nart::CommonARTModule: the CommonARTModule model.\ndata::DataSplit: a DataSplit container of a supervised train/test split.\nn_train::Integer: the number of training iterations.\n\nMethod List / Definition Locations\n\nbasic_train!(art, data; display, desc)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/train-test.jl:106.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.build_art_stats-Tuple{}","page":"Dev Index","title":"DeepART.build_art_stats","text":"build_art_stats() -> Dict{String, Any}\n\n\nSummary\n\nInitializes an ARTStats dictionary with zero entries.\n\nMethod List / Definition Locations\n\nbuild_art_stats()\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/common.jl:14.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.class_incrementalize-Tuple{DeepART.SupervisedDataset}","page":"Dev Index","title":"DeepART.class_incrementalize","text":"class_incrementalize(\n    data::DeepART.SupervisedDataset\n) -> Vector{DeepART.SupervisedDataset}\n\n\nSummary\n\nTurns a normal SupervisedDataset into a class-incremental vector of SupervisedDatasets.\n\nArguments\n\ndata::SupervisedDataset: a SupervisedDataset containing samples and their labels.\n\nMethod List / Definition Locations\n\nclass_incrementalize(data)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/ClassIncrementalDataSplit.jl:61.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.complement_code-Tuple{Any}","page":"Dev Index","title":"DeepART.complement_code","text":"complement_code(x) -> Any\n\n\nSummary\n\nReturns the complement code of the input\n\nMethod List / Definition Locations\n\ncomplement_code(x)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/Layers/common.jl:28.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.complement_code_conv-Tuple{Any}","page":"Dev Index","title":"DeepART.complement_code_conv","text":"complement_code_conv(x) -> Any\n\n\nSummary\n\nDefinition of the complement coding function for convolutional layers, which simply means that the channel layer (dims=3) is used for the complement coding.\n\nMethod List / Definition Locations\n\ncomplement_code_conv(x)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/Layers/CCLayer.jl:24.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.config_dir-Tuple","page":"Dev Index","title":"DeepART.config_dir","text":"config_dir(args...) -> String\n\n\nSummary\n\nPoints to the configs directory.\n\nArguments\n\nargs...: the string directories to append to the directory.\n\nMethod List / Definition Locations\n\nconfig_dir(args)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/drwatson.jl:56.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.configs_dir-Tuple","page":"Dev Index","title":"DeepART.configs_dir","text":"configs_dir(args...) -> String\n\n\nSummary\n\nDrWatson-style configs results directory.\n\nArguments\n\nargs...: the string directories to append to the directory.\n\nMethod List / Definition Locations\n\nconfigs_dir(args)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/drwatson.jl:97.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.copy_stats!-Tuple{DeepART.ARTINSTART}","page":"Dev Index","title":"DeepART.copy_stats!","text":"copy_stats!(art::DeepART.ARTINSTART)\n\n\nSummary\n\nCopies the statistics from the head module to the top of the ARTINSTART module.\n\nMethod List / Definition Locations\n\ncopy_stats!(art)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/ARTINSTART.jl:167.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.create_complex_condensed_plot_alt","page":"Dev Index","title":"DeepART.create_complex_condensed_plot_alt","text":"create_complex_condensed_plot_alt(\n    perfs,\n    vals,\n    class_labels\n) -> Tuple{Plots.Plot, Vector{Any}, Vector{Any}}\ncreate_complex_condensed_plot_alt(\n    perfs,\n    vals,\n    class_labels,\n    percentages::Bool\n) -> Tuple{Plots.Plot, Vector{Any}, Vector{Any}}\n\n\nSummary\n\nCreate and return an alternate complex condensed scenario plot.\n\nMethod List / Definition Locations\n\ncreate_complex_condensed_plot_alt(perfs, vals, class_labels)\ncreate_complex_condensed_plot_alt(\n    perfs,\n    vals,\n    class_labels,\n    percentages\n)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/plots.jl:379.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DeepART.create_confusion_heatmap-Tuple{Vector{String}, AbstractVector{T} where T<:Integer, AbstractVector{T} where T<:Integer}","page":"Dev Index","title":"DeepART.create_confusion_heatmap","text":"create_confusion_heatmap(\n    class_labels::Vector{String},\n    y::AbstractVector{T} where T<:Integer,\n    y_hat::AbstractVector{T} where T<:Integer;\n    kwargs...\n) -> Plots.Plot\n\n\nSummary\n\nCreates the confusion matrix as a heatmap using Plots.\n\nArguments\n\nclass_labels::Vector{String}: the string labels for the classes.\ny::IntegerVector: the class truth values.\ny_hat::IntegerVector: the class estimates.\n\nMethod List / Definition Locations\n\ncreate_confusion_heatmap(class_labels, y, y_hat; kwargs...)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/plots.jl:143.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.create_custom_confusion_heatmap","page":"Dev Index","title":"DeepART.create_custom_confusion_heatmap","text":"create_custom_confusion_heatmap(\n    class_labels::Vector{String},\n    norm_cm::AbstractMatrix{T} where T<:Real\n) -> Plots.Plot\ncreate_custom_confusion_heatmap(\n    class_labels::Vector{String},\n    norm_cm::AbstractMatrix{T} where T<:Real,\n    fontsize::Real\n) -> Plots.Plot\n\n\nSummary\n\nReturns a handle to a labeled and annotated heatmap plot of the confusion matrix.\n\nArguments\n\nnorm_cm::RealMatrix: the normalized confuction matrix to plot as a heatmap.\n\nMethod List / Definition Locations\n\ncreate_custom_confusion_heatmap(class_labels, norm_cm)\ncreate_custom_confusion_heatmap(\n    class_labels,\n    norm_cm,\n    fontsize\n)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/plots.jl:277.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DeepART.create_unicode_confusion_heatmap-Tuple{Vector{String}, AbstractVector{T} where T<:Integer, AbstractVector{T} where T<:Integer}","page":"Dev Index","title":"DeepART.create_unicode_confusion_heatmap","text":"create_unicode_confusion_heatmap(\n    class_labels::Vector{String},\n    y::AbstractVector{T} where T<:Integer,\n    y_hat::AbstractVector{T} where T<:Integer;\n    kwargs...\n) -> Union{UnicodePlots.Plot{T, Val{true}} where T<:UnicodePlots.HeatmapCanvas, UnicodePlots.Plot{T, Val{false}} where T<:UnicodePlots.HeatmapCanvas}\n\n\nSummary\n\nMakes and returns a unicode confusion heatmap for terminal viewing.\n\nMethod List / Definition Locations\n\ncreate_unicode_confusion_heatmap(\n    class_labels,\n    y,\n    y_hat;\n    kwargs...\n)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/plots.jl:110.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.data_dir-Tuple","page":"Dev Index","title":"DeepART.data_dir","text":"data_dir(args...) -> String\n\n\nSummary\n\nPoints to the data directory.\n\nArguments\n\nargs...: the string directories to append to the directory.\n\nMethod List / Definition Locations\n\ndata_dir(args)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/drwatson.jl:44.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.element_min-Tuple{AbstractVector{T} where T<:Real, AbstractVector{T} where T<:Real}","page":"Dev Index","title":"DeepART.element_min","text":"element_min(\n    x::AbstractVector{T} where T<:Real,\n    W::AbstractVector{T} where T<:Real\n) -> Any\n\n\nSummary\n\nReturns the element-wise minimum between sample x and weight W.\n\nArguments\n\nx::RealVector: the input sample.\nW::RealVector: the weight vector to compare the sample against.\n\nMethod List / Definition Locations\n\nelement_min(x, W)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/common.jl:127.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.evaluate_agent!-Tuple{DeepART.Agent, DeepART.Experience, DeepART.ClassIncrementalDataSplit, Dict{String, Int64}}","page":"Dev Index","title":"DeepART.evaluate_agent!","text":"evaluate_agent!(\n    agent::DeepART.Agent,\n    experience::DeepART.Experience,\n    data::DeepART.ClassIncrementalDataSplit,\n    name_map::Dict{String, Int64}\n) -> Dict\n\n\nSummary\n\nEvaluates a single agent on a single experience, training or testing as needed.\n\nArguments\n\nagent::Agent: the Agent to evaluate.\nexp::Experience: the Experience to use for training/testing.\n\nMethod List / Definition Locations\n\nevaluate_agent!(agent, experience, data, name_map)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/agents.jl:165.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.fields_to_dict!-Tuple{AbstractDict, Any}","page":"Dev Index","title":"DeepART.fields_to_dict!","text":"fields_to_dict!(dict::AbstractDict, opts)\n\n\nSummary\n\nAdds entry to a dictionary from a struct with fields.\n\nMeant to be used with StatsDict.\n\nArguments\n\ndict::AbstractDict: the StatsDict dictionary to add entries to.\nopts::Any: a struct containing fields, presumably of options, to add as key-value entries to the dict.\n\nMethod List / Definition Locations\n\nfields_to_dict!(dict, opts)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/scenario.jl:208.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.flatten-Tuple{AbstractArray{T} where T<:Real}","page":"Dev Index","title":"DeepART.flatten","text":"flatten(x::AbstractArray{T} where T<:Real) -> Any\n\n\nSummary\n\nFlattens a set of features to a 2D matrix.\n\nEvery dimension except the last is reshaped into the first dimension.\n\nArguments\n\nx::AbstractFeatures: the array of features to flatten.\n\nMethod List / Definition Locations\n\nflatten(x)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/common.jl:78.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.flatty-Tuple{DeepART.DataSplit}","page":"Dev Index","title":"DeepART.flatty","text":"flatty(data::DeepART.DataSplit) -> DeepART.DataSplit\n\n\nSummary\n\nFlattens a DataSplit.\n\nArguments\n\ndata::DataSplit: a DataSplit container of a supervised train/test split.\nn_class::Int=0: the true number of classes (if known).\n\nMethod List / Definition Locations\n\nflatty(data)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/DataSplit.jl:118.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.flatty-Tuple{DeepART.SupervisedDataset}","page":"Dev Index","title":"DeepART.flatty","text":"flatty(\n    data::DeepART.SupervisedDataset\n) -> DeepART.SupervisedDataset\n\n\nSummary\n\nFlattens the feature dimensions of a SupervisedDataset.\n\nArguments\n\ndata::SupervisedDataset: a SupervisedDataset containing samples and their labels.\nn_class::Int=0: the true number of classes (if known).\n\nMethod List / Definition Locations\n\nflatty(data)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/SupervisedDataset.jl:111.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.flatty_hotty","page":"Dev Index","title":"DeepART.flatty_hotty","text":"flatty_hotty(\n    data::DeepART.SupervisedDataset\n) -> DeepART.SupervisedDataset{T, U} where {T<:(AbstractArray{T} where T<:Real), U<:OneHotArrays.OneHotArray}\nflatty_hotty(\n    data::DeepART.SupervisedDataset,\n    n_class::Int64\n) -> DeepART.SupervisedDataset{T, U} where {T<:(AbstractArray{T} where T<:Real), U<:OneHotArrays.OneHotArray}\n\n\nSummary\n\nFlattens the feature dimensions of a SupervisedDataset and one-hot encodes the labels.\n\nArguments\n\ndata::SupervisedDataset: a SupervisedDataset containing samples and their labels.\nn_class::Int=0: the true number of classes (if known).\n\nMethod List / Definition Locations\n\nflatty_hotty(data)\nflatty_hotty(data, n_class)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/SupervisedDataset.jl:130.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DeepART.flatty_hotty-2","page":"Dev Index","title":"DeepART.flatty_hotty","text":"flatty_hotty(data::DeepART.DataSplit) -> DeepART.DataSplit\nflatty_hotty(\n    data::DeepART.DataSplit,\n    n_class::Int64\n) -> DeepART.DataSplit\n\n\nSummary\n\nFlattens and one-hot encodes a DataSplit.\n\nArguments\n\ndata::DataSplit: a DataSplit container of a supervised train/test split.\nn_class::Int=0: the true number of classes (if known).\n\nMethod List / Definition Locations\n\nflatty_hotty(data)\nflatty_hotty(data, n_class)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/DataSplit.jl:136.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DeepART.flux_accuracy-Tuple{AbstractMatrix, AbstractMatrix, Int64}","page":"Dev Index","title":"DeepART.flux_accuracy","text":"flux_accuracy(\n    y_hat::AbstractMatrix,\n    y_truth::AbstractMatrix,\n    n_class::Int64\n) -> Any\n\n\nSummary\n\nDefinition of testing accuracy for Flux.jl training loop logs.\n\nArguments\n\ny_hat::AbstractMatrix: the predicted labels as a matrix.\ny_truth::AbstractMatrix: the true labels as a matrix.\nn_class::Int: the number of classes in the dataset.\n\nMethod List / Definition Locations\n\nflux_accuracy(y_hat, y_truth, n_class)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/train-test.jl:508.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.forward-Tuple{DeepART.DeepHeadART, AbstractArray{T} where T<:Real}","page":"Dev Index","title":"DeepART.forward","text":"forward(\n    art::DeepART.DeepHeadART,\n    x::AbstractArray{T} where T<:Real\n) -> Tuple{Any, Vector}\n\n\nSummary\n\nForward pass for a DeepHeadART module.\n\nArguments\n\nart::DeepHeadART: the DeepHeadART module.\nx::RealArray: the input data.\n\nMethod List / Definition Locations\n\nforward(art, x)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/DeepHeadART.jl:184.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.forward-Tuple{DeepART.MultiHeadField, AbstractArray{T} where T<:Real}","page":"Dev Index","title":"DeepART.forward","text":"forward(\n    field::DeepART.MultiHeadField,\n    x::AbstractArray{T} where T<:Real\n) -> Vector\n\n\nSummary\n\nComputes the forward pass for a MultiHeadField.\n\nArguments\n\nfield::MultiHeadField: the MultiHeadField object.\nx::RealArray: the input data.\n\nMethod List / Definition Locations\n\nforward(field, x)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/MultiHeadField.jl:144.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.full_scenario-Tuple{Union{AdaptiveResonance.ARTModule, DeepART.DeepARTModule, DeepART.Hebb.BlockNet, DeepART.Hebb.HebbModel}, Any, DeepART.ClassIncrementalDataSplit, AbstractString, Any, AbstractDict}","page":"Dev Index","title":"DeepART.full_scenario","text":"full_scenario(\n    art::Union{AdaptiveResonance.ARTModule, DeepART.DeepARTModule, DeepART.Hebb.BlockNet, DeepART.Hebb.HebbModel},\n    opts,\n    data::DeepART.ClassIncrementalDataSplit,\n    exp_dir::AbstractString,\n    l2logger,\n    d::AbstractDict\n)\n\n\nSummary\n\nRuns a full scenario for a given dataset.\n\nA CommonARTModule here needs to have:\n\nincrementalsupervisedtrain!(...)\nincremental_classify(...)\nstats[\"M\"] and stats[\"T\"] for ART match and activation.\n\nArguments\n\nart::CommonARTModule: the ART module to use.\nopts: the options used to create the ART module.\ndata::ClassIncrementalDataSplit: the data to use.\nexp_dir::AbstractString: the directory to containing the config and scenario files for each permutation.\nl2logger::PythonCall.Py: the l2logger Python library module, used for instantiating the specific DataLogger itself here.\n\nMethod List / Definition Locations\n\nfull_scenario(art, opts, data, exp_dir, l2logger, d)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/agents.jl:324.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.gen_all_scenarios","page":"Dev Index","title":"DeepART.gen_all_scenarios","text":"gen_all_scenarios(\n    datasets::Dict{String, DeepART.DataSplit},\n    groupings_dict::AbstractDict\n)\ngen_all_scenarios(\n    datasets::Dict{String, DeepART.DataSplit},\n    groupings_dict::AbstractDict,\n    n_max::Int64\n)\n\n\nSummary\n\nGenerates all scenarios.\n\nMethod List / Definition Locations\n\ngen_all_scenarios(datasets, groupings_dict)\ngen_all_scenarios(datasets, groupings_dict, n_max)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/scenario.jl:470.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DeepART.gen_permutation_groupings","page":"Dev Index","title":"DeepART.gen_permutation_groupings","text":"gen_permutation_groupings(data::DeepART.DataSplit) -> Vector\ngen_permutation_groupings(\n    data::DeepART.DataSplit,\n    n_max::Int64\n) -> Vector\n\n\nSummary\n\nGenerates all permutations of groupings in the dataset.\n\nMethod List / Definition Locations\n\ngen_permutation_groupings(data)\ngen_permutation_groupings(data, n_max)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/scenario.jl:243.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DeepART.gen_random_groupings-Tuple{DeepART.DataSplit, Int64, Int64}","page":"Dev Index","title":"DeepART.gen_random_groupings","text":"gen_random_groupings(\n    data::DeepART.DataSplit,\n    group_size::Int64,\n    n_groupings::Int64\n) -> Vector{Vector{Vector{Int64}}}\n\n\nSummary\n\nGenerates n_groupings random groupings of the dataset with group size group_size.\n\nMethod List / Definition Locations\n\ngen_random_groupings(data, group_size, n_groupings)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/scenario.jl:263.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.gen_scenario_from_group-Tuple{AbstractString, DeepART.ClassIncrementalDataSplit, Vector{Vector{Int64}}}","page":"Dev Index","title":"DeepART.gen_scenario_from_group","text":"gen_scenario_from_group(\n    key::AbstractString,\n    cidata::DeepART.ClassIncrementalDataSplit,\n    order::Vector{Vector{Int64}}\n)\n\n\nSummary\n\nGenerates a single scenario according to a grouping.\n\nMethod List / Definition Locations\n\ngen_scenario_from_group(key, cidata, order)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/scenario.jl:310.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.gen_scenarios","page":"Dev Index","title":"DeepART.gen_scenarios","text":"gen_scenarios(\n    key::AbstractString,\n    datasplit::DeepART.DataSplit,\n    grouping_dict::AbstractDict\n)\ngen_scenarios(\n    key::AbstractString,\n    datasplit::DeepART.DataSplit,\n    grouping_dict::AbstractDict,\n    n_max::Int64\n)\n\n\nSummary\n\nGenerates scenarios for one dataset.\n\nMethod List / Definition Locations\n\ngen_scenarios(key, datasplit, grouping_dict)\ngen_scenarios(key, datasplit, grouping_dict, n_max)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/scenario.jl:442.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DeepART.get_EWC_loss-Tuple{DeepART.EWCLossState, DeepART.EWCLossOpts, Any}","page":"Dev Index","title":"DeepART.get_EWC_loss","text":"get_EWC_loss(\n    state::DeepART.EWCLossState,\n    o::DeepART.EWCLossOpts,\n    x\n) -> Any\n\n\nSummary\n\nReturns the EWC loss for the given state, options, and parameters.\n\nArguments\n\nstate::EWCLossState: the current EWCLossState.\no::EWCLossOpts: the EWCLossOpts for the EWC method.\nx: the flat network parameters.\n\nMethod List / Definition Locations\n\nget_EWC_loss(state, o, x)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/Optimisers/EWCLoss.jl:118.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_accuracies-Tuple{AbstractVector{T} where T<:Integer, AbstractVector{T} where T<:Integer, Integer}","page":"Dev Index","title":"DeepART.get_accuracies","text":"get_accuracies(\n    y::AbstractVector{T} where T<:Integer,\n    y_hat::AbstractVector{T} where T<:Integer,\n    n_classes::Integer\n) -> Any\n\n\nSummary\n\nGet a list of the percentage accuracies.\n\nArguments\n\ny::IntegerVector: the target values.\ny_hat::IntegerVector: the agent's estimates.\nn_classes::Integer: the number of total classes in the test set.\n\nMethod List / Definition Locations\n\nget_accuracies(y, y_hat, n_classes)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/train-test.jl:371.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_beta-Tuple{DeepART.DeepARTModule, AbstractArray{T} where T<:Real}","page":"Dev Index","title":"DeepART.get_beta","text":"get_beta(\n    art::DeepART.DeepARTModule,\n    outs::AbstractArray{T} where T<:Real\n) -> Any\n\n\nSummary\n\nGets the local learning parameter.\n\nMethod List / Definition Locations\n\nget_beta(art, outs)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/common.jl:251.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_cifar10-Tuple{}","page":"Dev Index","title":"DeepART.get_cifar10","text":"get_cifar10(\n;\n    flatten,\n    gray,\n    n_train,\n    n_test\n) -> DeepART.DataSplit\n\n\nSummary\n\nLoads the CIFAR10 dataset using MLDatasets.\n\nMethod List / Definition Locations\n\nget_cifar10(; flatten, gray, n_train, n_test)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/data.jl:192.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_cifar100_coarse-Tuple{}","page":"Dev Index","title":"DeepART.get_cifar100_coarse","text":"get_cifar100_coarse(\n;\n    flatten,\n    gray,\n    n_train,\n    n_test\n) -> DeepART.DataSplit\n\n\nSummary\n\nLoads the coarse CIFAR100 dataset using MLDatasets.\n\nMethod List / Definition Locations\n\nget_cifar100_coarse(; flatten, gray, n_train, n_test)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/data.jl:312.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_cifar100_fine-Tuple{}","page":"Dev Index","title":"DeepART.get_cifar100_fine","text":"get_cifar100_fine(\n;\n    flatten,\n    gray,\n    n_train,\n    n_test\n) -> DeepART.DataSplit\n\n\nSummary\n\nLoads the fine CIFAR100 dataset using MLDatasets.\n\nMethod List / Definition Locations\n\nget_cifar100_fine(; flatten, gray, n_train, n_test)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/data.jl:254.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_confusion-Tuple{AbstractVector{T} where T<:Integer, AbstractVector{T} where T<:Integer, Integer}","page":"Dev Index","title":"DeepART.get_confusion","text":"get_confusion(\n    y::AbstractVector{T} where T<:Integer,\n    y_hat::AbstractVector{T} where T<:Integer,\n    n_classes::Integer\n) -> Matrix{Int64}\n\n\nSummary\n\nWrapper method for getting the raw confusion matrix.\n\nArguments\n\ny::IntegerVector: the target values.\ny_hat::IntegerVector: the agent's estimates.\nn_classes::Integer: the number of total classes in the test set.\n\nMethod List / Definition Locations\n\nget_confusion(y, y_hat, n_classes)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/plots.jl:84.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_conv_model-Tuple{Tuple}","page":"Dev Index","title":"DeepART.get_conv_model","text":"get_conv_model(size_tuple::Tuple) -> Any\n\n\nSummary\n\nGenerates the feature extractor model for the ART network.\n\nArguments\n\nsize_tuple::Tuple{Int}: a tuple of the model input dimensions.\n\nMethod List / Definition Locations\n\nget_conv_model(size_tuple)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/common.jl:103.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_data_subset-Tuple{DeepART.DataSplit}","page":"Dev Index","title":"DeepART.get_data_subset","text":"get_data_subset(\n    data::DeepART.DataSplit;\n    n_train,\n    n_test\n) -> DeepART.DataSplit\n\n\nSummary\n\nGets a training and testing subset of the data from a DataSplit object.\n\nMethod List / Definition Locations\n\nget_data_subset(data; n_train, n_test)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/data.jl:135.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_dense-Tuple{Vector{Int64}}","page":"Dev Index","title":"DeepART.get_dense","text":"get_dense(n_neurons::Vector{Int64}) -> Flux.Chain\n\n\nSummary\n\nCreates a Flux.Chain of Flux.Dense layers according to the hidden layers DenseSpecifier.\n\nArguments\n\nn_neurons::DenseSpecifier: the DenseSpecifier that specifies the number of neurons per layer, including the input and output layers.\n\nMethod List / Definition Locations\n\nget_dense(n_neurons)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/common.jl:71.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_dense_model-Tuple{Tuple}","page":"Dev Index","title":"DeepART.get_dense_model","text":"get_dense_model(\n    size_tuple::Tuple\n) -> Union{Flux.Chain{T} where T<:Tuple{Flux.Dense{typeof(NNlib.σ)}, Flux.Dense{typeof(NNlib.σ), Matrix{Float32}}, Flux.Dense{typeof(NNlib.σ), Matrix{Float32}}}, Flux.Chain{T} where T<:Tuple{Flux.Scale{typeof(NNlib.σ), A} where A<:(AbstractVector), Flux.Dense{typeof(NNlib.σ), Matrix{Float32}}, Flux.Dense{typeof(NNlib.σ), Matrix{Float32}}}}\n\n\nSummary\n\nConstructs a dense model.\n\nArguments\n\nsize_tuple::Tuple{Int}: a tuple of the model input dimensions.\n\nMethod List / Definition Locations\n\nget_dense_model(size_tuple)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/common.jl:146.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_dist_grouping-Tuple{Vector{Int64}, Int64}","page":"Dev Index","title":"DeepART.get_dist_grouping","text":"get_dist_grouping(\n    classes::Vector{Int64},\n    group_size::Int64\n) -> Vector{Vector{Int64}}\n\n\nSummary\n\nGenerates a new grouping from the classes vector and the group size, assuming that the length of the classes is evenly divisible by group_size.\n\nMethod List / Definition Locations\n\nget_dist_grouping(classes, group_size)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/dist.jl:63.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_fashionmnist-Tuple{}","page":"Dev Index","title":"DeepART.get_fashionmnist","text":"get_fashionmnist(\n;\n    flatten,\n    gray,\n    n_train,\n    n_test\n) -> DeepART.DataSplit\n\n\nSummary\n\nLoads the FashionMNIST dataset using MLDatasets.\n\nMethod List / Definition Locations\n\nget_fashionmnist(; flatten, gray, n_train, n_test)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/data.jl:363.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_features-Tuple{DeepART.SimpleDeepART, AbstractArray{T} where T<:Real}","page":"Dev Index","title":"DeepART.get_features","text":"get_features(\n    model::DeepART.SimpleDeepART,\n    x::AbstractArray{T} where T<:Real\n) -> Any\n\n\nSummary\n\nRuns inference on the feature extractor of a SimpleDeepART model on a provided sample array.\n\nArguments\n\nmodel::SimpleDeepART: the SimpleDeepART model.\nx::RealArray: the sample to process with the deep model.\n\nMethod List / Definition Locations\n\nget_features(model, x)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/SimpleDeepART/SimpleDeepART.jl:145.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_features-Tuple{DeepART.SimpleDeepART, DeepART.SupervisedDataset, Integer}","page":"Dev Index","title":"DeepART.get_features","text":"get_features(\n    model::DeepART.SimpleDeepART,\n    data::DeepART.SupervisedDataset,\n    index::Integer\n) -> Any\n\n\nSummary\n\nRuns inference on the SimpleDeepART model's feature extractor.\n\nArguments\n\nmodel::SimpleDeepART: the SimpleDeepART model.\ndata::SupervisedDataset: the SupervisedDataset dataset with the features to run inference on.\nindex::Integer: the sample index to extract features of.\n\nMethod List / Definition Locations\n\nget_features(model, data, index)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/SimpleDeepART/SimpleDeepART.jl:120.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_fuzzy_head","page":"Dev Index","title":"DeepART.get_fuzzy_head","text":"get_fuzzy_head(\n    head_dim::Integer\n) -> Flux.Chain{T} where T<:Tuple{typeof(DeepART.complement_code), Any}\nget_fuzzy_head(head_dim::Integer, weights) -> Any\n\n\nSummary\n\nConstructs a FuzzyART head node with complement coding preprocessing.\n\nMethod List / Definition Locations\n\nget_fuzzy_head(head_dim)\nget_fuzzy_head(head_dim, weights)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/INSTART.jl:153.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DeepART.get_grouping-Tuple{Vector{Int64}, Int64}","page":"Dev Index","title":"DeepART.get_grouping","text":"get_grouping(\n    classes::Vector{Int64},\n    group_size::Int64\n) -> Vector{Vector{Int64}}\n\n\nSummary\n\nGenerates a new grouping from the classes vector and the group size, assuming that the length of the classes is evenly divisible by group_size.\n\nMethod List / Definition Locations\n\nget_grouping(classes, group_size)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/scenario.jl:219.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_head","page":"Dev Index","title":"DeepART.get_head","text":"get_head(\n    opts\n) -> Union{Flux.Chain{T} where T<:Tuple{typeof(DeepART.complement_code), Any}, Flux.Chain{T} where T<:Tuple{typeof(identity), Any}}\nget_head(opts, weights) -> Any\n\n\nSummary\n\nConstructs an INSTART head node.\n\nMethod List / Definition Locations\n\nget_head(opts)\nget_head(opts, weights)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/INSTART.jl:173.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DeepART.get_hypersphere_head","page":"Dev Index","title":"DeepART.get_hypersphere_head","text":"get_hypersphere_head(\n    head_dim::Integer\n) -> Flux.Chain{T} where T<:Tuple{typeof(identity), Any}\nget_hypersphere_head(head_dim::Integer, weights) -> Any\n\n\nSummary\n\nConstructs a HypersphereART head node.\n\nMethod List / Definition Locations\n\nget_hypersphere_head(head_dim)\nget_hypersphere_head(head_dim, weights)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/INSTART.jl:133.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DeepART.get_index_from_name-Union{Tuple{T}, Tuple{Vector{T}, AbstractString}} where T<:AbstractString","page":"Dev Index","title":"DeepART.get_index_from_name","text":"get_index_from_name(\n    labels::Array{T<:AbstractString, 1},\n    name::AbstractString\n) -> Any\n\n\nSummary\n\nGets an integer index of where a string name appears in a list of strings.\n\nArguments\n\nlabels::Vector{T} where T <: AbstractString: the list of strings to search.\nname::AbstractString: the name to search for in the list of labels.\n\nMethod List / Definition Locations\n\nget_index_from_name(labels, name)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/agents.jl:142.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_isr-Tuple{}","page":"Dev Index","title":"DeepART.get_isr","text":"get_isr(; shuffle, p, dir) -> Tuple{String, String, Any}\n\n\nSummary\n\nLoads the Indoor Scene Recognition dataset from a local directory.\n\nMethod List / Definition Locations\n\nget_isr(; shuffle, p, dir)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/data.jl:577.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_isr_dir-Tuple{}","page":"Dev Index","title":"DeepART.get_isr_dir","text":"get_isr_dir() -> String\n\n\nSummary\n\nPoints to the directory containing the Indoor Scene Recognition dataset depending on the host machine.\n\nMethod List / Definition Locations\n\nget_isr_dir()\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/data.jl:531.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_label-Tuple{DeepART.SupervisedDataset, Int64}","page":"Dev Index","title":"DeepART.get_label","text":"get_label(\n    data::DeepART.SupervisedDataset,\n    index::Int64\n) -> Any\n\n\nSummary\n\nReturns a supervised label from the SupervisedDataset at the provided index, accounting for one-hot labels.\n\nArguments\n\ndata::SupervisedDataset: a SupervisedDataset containing samples and their labels.\nindex::Int: the element index.\n\nMethod List / Definition Locations\n\nget_label(data, index)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/SupervisedDataset.jl:81.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_last_f1-Tuple{Tuple}","page":"Dev Index","title":"DeepART.get_last_f1","text":"get_last_f1(a::Tuple) -> Any\n\n\nSummary\n\nReturns the last activation of the F1 layer.\n\nArguments\n\na::Tuple: the activations tuple.\n\nMethod List / Definition Locations\n\nget_last_f1(a)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/DeepHeadART.jl:335.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_last_f2-Tuple{Tuple}","page":"Dev Index","title":"DeepART.get_last_f2","text":"get_last_f2(a::Tuple) -> Any\n\n\nSummary\n\nReturns the last activations of the F2 layer.\n\nArguments\n\na::Tuple: the activations tuple.\n\nMethod List / Definition Locations\n\nget_last_f2(a)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/DeepHeadART.jl:345.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_loader-Tuple{AdaptiveResonance.ARTModule, DeepART.SupervisedDataset}","page":"Dev Index","title":"DeepART.get_loader","text":"get_loader(\n    art::AdaptiveResonance.ARTModule,\n    data::DeepART.SupervisedDataset\n) -> MLUtils.DataLoader{_A, _B, _C, Val{nothing}, DeepART.SupervisedDataset{T, U}, Random.TaskLocalRNG} where {_A<:Union{MLUtils.BatchView, MLUtils.ObsView}, _B, _C, T<:(AbstractArray{T} where T<:Real), U<:(AbstractArray{T} where T<:Integer)}\n\n\nSummary\n\nGenerates a data loader for a CommonARTModule training/testing loop.\n\nMethod List / Definition Locations\n\nget_loader(art, data)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/train-test.jl:53.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_loader-Tuple{DeepART.DeepARTModule, DeepART.SupervisedDataset}","page":"Dev Index","title":"DeepART.get_loader","text":"get_loader(\n    art::DeepART.DeepARTModule,\n    data::DeepART.SupervisedDataset\n) -> MLUtils.DataLoader{T, B, P, Val{nothing}, O, Random.TaskLocalRNG} where {T<:Union{MLUtils.BatchView, MLUtils.ObsView}, B, P, O}\n\n\nSummary\n\nGenerates a data loader for a CommonARTModule training/testing loop.\n\nMethod List / Definition Locations\n\nget_loader(art, data)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/train-test.jl:66.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_mnist-Tuple{}","page":"Dev Index","title":"DeepART.get_mnist","text":"get_mnist(\n;\n    flatten,\n    gray,\n    n_train,\n    n_test\n) -> DeepART.DataSplit\n\n\nSummary\n\nLoads the MNIST dataset using MLDatasets.\n\nMethod List / Definition Locations\n\nget_mnist(; flatten, gray, n_train, n_test)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/data.jl:149.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_module_from_options-Tuple{AbstractDict, DeepART.ClassIncrementalDataSplit}","page":"Dev Index","title":"DeepART.get_module_from_options","text":"get_module_from_options(\n    d::AbstractDict,\n    data::DeepART.ClassIncrementalDataSplit\n) -> Union{AdaptiveResonance.SFAM, DeepART.Hebb.BlockNet, DeepART.ARTINSTART, DeepART.Hebb.HebbModel}\n\n\nSummary\n\nDispatcher for the ART module builders using a class-incremental split, build based upon from simply the first task.\n\nMethod List / Definition Locations\n\nget_module_from_options(d, data)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/builders.jl:11.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_module_from_options-Tuple{AbstractDict, DeepART.SupervisedDataset}","page":"Dev Index","title":"DeepART.get_module_from_options","text":"get_module_from_options(\n    d::AbstractDict,\n    data::DeepART.SupervisedDataset\n) -> Union{AdaptiveResonance.SFAM, DeepART.Hebb.BlockNet, DeepART.ARTINSTART, DeepART.Hebb.HebbModel}\n\n\nSummary\n\nDispatcher for building ART modules from options and a supervised dataset.\n\nMethod List / Definition Locations\n\nget_module_from_options(d, data)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/builders.jl:24.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_n-Tuple{Integer, DeepART.SupervisedDataset}","page":"Dev Index","title":"DeepART.get_n","text":"get_n(n::Integer, data::DeepART.SupervisedDataset) -> Any\n\n\nSummary\n\nHelper function for making sure that the selected number of samples is within the bounds of the current dataset.\n\nArguments\n\nn::Integer: the selected number of samples to train/test on.\ndata::SupervisedDataset: the dataset to check against.\n\nMethod List / Definition Locations\n\nget_n(n, data)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/post-common.jl:28.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_normalized_confusion-Tuple{AbstractVector{T} where T<:Integer, AbstractVector{T} where T<:Integer, Integer}","page":"Dev Index","title":"DeepART.get_normalized_confusion","text":"get_normalized_confusion(\n    y::AbstractVector{T} where T<:Integer,\n    y_hat::AbstractVector{T} where T<:Integer,\n    n_classes::Integer\n) -> Matrix{Float64}\n\n\nSummary\n\nGet the normalized confusion matrix.\n\nArguments\n\ny::IntegerVector: the target values.\ny_hat::IntegerVector: the agent's estimates.\nn_classes::Integer: the number of total classes in the test set.\n\nMethod List / Definition Locations\n\nget_normalized_confusion(y, y_hat, n_classes)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/plots.jl:96.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_omniglot-Tuple{}","page":"Dev Index","title":"DeepART.get_omniglot","text":"get_omniglot(\n;\n    flatten,\n    gray,\n    n_train,\n    n_test\n) -> DeepART.DataSplit\n\n\nSummary\n\nLoads the Omniglot dataset using MLDatasets.\n\nMethod List / Definition Locations\n\nget_omniglot(; flatten, gray, n_train, n_test)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/data.jl:406.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_perf-Tuple{DeepART.SupervisedDataset, Vector{Int64}}","page":"Dev Index","title":"DeepART.get_perf","text":"get_perf(\n    data::DeepART.SupervisedDataset,\n    y_hats::Vector{Int64}\n) -> Any\n\n\nSummary\n\nComputes the performance of the ART module given some estimates.\n\nMethod List / Definition Locations\n\nget_perf(data, y_hats)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/train-test.jl:230.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_rep_conv-Tuple{Tuple, Integer}","page":"Dev Index","title":"DeepART.get_rep_conv","text":"get_rep_conv(\n    size_tuple::Tuple,\n    head_dim::Integer\n) -> Flux.Chain{T} where T<:Tuple{typeof(DeepART.complement_code_conv), Flux.Chain{T} where T<:Tuple{Any}, Flux.Chain{T} where T<:Tuple{Flux.MaxPool, typeof(DeepART.complement_code_conv)}, Flux.Chain{T} where T<:Tuple{Any}, Flux.Chain{T} where T<:Tuple{Flux.AdaptiveMaxPool, typeof(Flux.flatten), typeof(DeepART.complement_code)}, Flux.Chain{T} where T<:Tuple{Any, typeof(vec)}}\n\n\nSummary\n\nConstructs and returns the representative convolutional model for DeepARTModules.\n\nArguments\n\nsize_tuple::Tuple: the size of the input data for convolutions and batchs.\nhead_dim::Integer: the dimension of the output head for the FuzzyARTMAP field.\n\nMethod List / Definition Locations\n\nget_rep_conv(size_tuple, head_dim)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/representatives.jl:93.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_rep_dense-Tuple{Integer, Integer}","page":"Dev Index","title":"DeepART.get_rep_dense","text":"get_rep_dense(\n    n_input::Integer,\n    head_dim::Integer\n) -> Flux.Chain{T} where T<:Tuple{typeof(DeepART.complement_code), Any, typeof(DeepART.complement_code), Any, typeof(DeepART.complement_code), Any}\n\n\nSummary\n\nConstructs and returns the representative dense model for DeepARTModules.\n\nArguments\n\nn_input::Integer: the size of the input data.\nhead_dim::Integer: the dimension of the output head for the FuzzyARTMAP field.\n\nMethod List / Definition Locations\n\nget_rep_dense(n_input, head_dim)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/representatives.jl:36.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_rep_fia_conv-Tuple{Tuple, Integer}","page":"Dev Index","title":"DeepART.get_rep_fia_conv","text":"get_rep_fia_conv(\n    size_tuple::Tuple,\n    head_dim::Integer\n) -> Flux.Chain{T} where T<:Tuple{typeof(DeepART.complement_code_conv), Flux.Chain{T} where T<:Tuple{Any}, Flux.Chain{T} where T<:Tuple{Flux.MaxPool, typeof(DeepART.complement_code_conv)}, Flux.Chain{T} where T<:Tuple{Any}, Flux.Chain{T} where T<:Tuple{Flux.AdaptiveMaxPool, typeof(Flux.flatten), typeof(DeepART.complement_code)}, Flux.Chain{T} where T<:Tuple{Any, typeof(vec)}}\n\n\nSummary\n\nConstructs and returns the representative convolutional model for DeepARTModules.\n\nArguments\n\nsize_tuple::Tuple: the size of the input data for convolutions and batchs.\nhead_dim::Integer: the dimension of the output head for the FuzzyARTMAP field.\n\nMethod List / Definition Locations\n\nget_rep_fia_conv(size_tuple, head_dim)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/representatives.jl:59.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_rep_fia_dense-Tuple{Integer, Integer}","page":"Dev Index","title":"DeepART.get_rep_fia_dense","text":"get_rep_fia_dense(\n    n_input::Integer,\n    head_dim::Integer\n) -> Flux.Chain{T} where T<:Tuple{typeof(DeepART.complement_code), Any, typeof(DeepART.complement_code), Any}\n\n\nSummary\n\nConstructs and returns the representative dense model for DeepARTModules.\n\nArguments\n\nn_input::Integer: the size of the input data.\nhead_dim::Integer: the dimension of the output head for the FuzzyARTMAP field.\n\nMethod List / Definition Locations\n\nget_rep_fia_dense(n_input, head_dim)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/representatives.jl:16.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_sample-Tuple{AbstractArray, Integer}","page":"Dev Index","title":"DeepART.get_sample","text":"get_sample(mat::AbstractArray, index::Integer) -> Any\n\n\nSummary\n\nSample getter for a matrix, determining convention depending on the array dimension.\n\nMethod List / Definition Locations\n\nget_sample(mat, index)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/SupervisedDataset.jl:52.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_sample-Tuple{DeepART.SupervisedDataset, Integer}","page":"Dev Index","title":"DeepART.get_sample","text":"get_sample(\n    data::DeepART.SupervisedDataset,\n    index::Integer\n) -> Any\n\n\nSummary\n\nReturns a feature sample from a SupervisedDataset at the provided index.\n\nArguments\n\ndata::SupervisedDataset: a SupervisedDataset containing samples and their labels.\nindex::Int: the element index.\n\nMethod List / Definition Locations\n\nget_sample(data, index)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/SupervisedDataset.jl:70.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_weights-Tuple{DeepART.SimpleDeepART, Integer}","page":"Dev Index","title":"DeepART.get_weights","text":"get_weights(\n    model::DeepART.SimpleDeepART,\n    index::Integer\n) -> Any\n\n\nSummary\n\nReturns the weights of a model at the layer index.\n\nArguments\n\nmodel::SimpleDeepART: the SimpleDeepART model.\nindex::Integer: the layer index to return weights for.\n\nMethod List / Definition Locations\n\nget_weights(model, index)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/SimpleDeepART/SimpleDeepART.jl:156.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.get_x_subset","page":"Dev Index","title":"DeepART.get_x_subset","text":"get_x_subset(x::AbstractArray) -> Any\nget_x_subset(x::AbstractArray, n_samples::Integer) -> Any\n\n\nSummary\n\nGets a subset of the dataset samples from the first index up to the number requested.\n\nMethod List / Definition Locations\n\nget_x_subset(x)\nget_x_subset(x, n_samples)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/data.jl:38.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DeepART.get_y_subset","page":"Dev Index","title":"DeepART.get_y_subset","text":"get_y_subset(y::AbstractArray) -> Any\nget_y_subset(y::AbstractArray, n_samples::Integer) -> Any\n\n\nSummary\n\nGets a subset of the dataset labels from the first index up to the number requested.\n\nMethod List / Definition Locations\n\nget_y_subset(y)\nget_y_subset(y, n_samples)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/data.jl:58.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DeepART.group_datasets","page":"Dev Index","title":"DeepART.group_datasets","text":"group_datasets(\n    data::Vector{DeepART.SupervisedDataset},\n    group::Vector{Int64}\n) -> DeepART.SupervisedDataset\ngroup_datasets(\n    data::Vector{DeepART.SupervisedDataset},\n    group::Vector{Int64},\n    shuffle::Bool\n) -> DeepART.SupervisedDataset\n\n\nSummary\n\nReturns a SupervisedDatasets that combines the datasets in a ClassIncrementalSupervisedDataset at the indices given by group.\n\nArguments\n\ndata::ClassIncrementalSupervisedDataset: the vector of SupervisedDatasets to select and combine from.\ngroup::Vector{Int}: the indices to select from for combining.\nshuffle::Bool: flag for pairwise shuffling the dataset after it has been combined, default true.\n\nMethod List / Definition Locations\n\ngroup_datasets(data, group)\ngroup_datasets(data, group, shuffle)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/ClassIncrementalDataSplit.jl:130.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DeepART.incremental_classify-Tuple{AdaptiveResonance.ARTModule, AbstractArray{T} where T<:Real}","page":"Dev Index","title":"DeepART.incremental_classify","text":"incremental_classify(\n    art::AdaptiveResonance.ARTModule,\n    x::AbstractArray{T} where T<:Real\n) -> Any\n\n\nSummary\n\nDispatch overload for the incremental classification with an ART.ARTModule.\n\nArguments\n\nart::ART.ARTModule: the ART.ARTModule to use for classification.\nx::RealVector: the input sample vector to use.\n\nMethod List / Definition Locations\n\nincremental_classify(art, x)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/incremental.jl:104.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.incremental_classify-Tuple{DeepART.DeepARTModule, AbstractArray{T} where T<:Real}","page":"Dev Index","title":"DeepART.incremental_classify","text":"incremental_classify(\n    art::DeepART.DeepARTModule,\n    x::AbstractArray{T} where T<:Real\n) -> Any\n\n\nSummary\n\nDispatch overload for the incremental classification with a DeepARTModule.\n\nArguments\n\nart::DeepARTModule: the DeepARTModule model.\nx::RealVector: the input sample vector to use.\n\nMethod List / Definition Locations\n\nincremental_classify(art, x)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/incremental.jl:118.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.incremental_supervised_train!-Tuple{AdaptiveResonance.ART, AbstractArray{T} where T<:Real, Integer}","page":"Dev Index","title":"DeepART.incremental_supervised_train!","text":"incremental_supervised_train!(\n    art::AdaptiveResonance.ART,\n    x::AbstractArray{T} where T<:Real,\n    y::Integer\n) -> Any\n\n\nSummary\n\nDispatch overload for incremental supervised training for an ART.ART module.\n\nArguments\n\nart::ART.ART: the supervised ART.ART module.\nx::RealVector: the input sample vector to use.\ny::Integer: the label for the input sample.\n\nMethod List / Definition Locations\n\nincremental_supervised_train!(art, x, y)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/incremental.jl:20.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.incremental_supervised_train!-Tuple{AdaptiveResonance.ARTMAP, AbstractArray{T} where T<:Real, Integer}","page":"Dev Index","title":"DeepART.incremental_supervised_train!","text":"incremental_supervised_train!(\n    art::AdaptiveResonance.ARTMAP,\n    x::AbstractArray{T} where T<:Real,\n    y::Integer\n) -> Any\n\n\nSummary\n\nDispatch overload for incremental supervised training for an ART.ARTMAP module.\n\nArguments\n\nart::ART.ARTMAP: the supervised ART.ARTMAP module.\nx::RealVector: the input sample vector to use.\ny::Integer: the label for the input sample.\n\nMethod List / Definition Locations\n\nincremental_supervised_train!(art, x, y)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/incremental.jl:43.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.incremental_supervised_train!-Tuple{DeepART.DeepARTModule, AbstractArray{T} where T<:Real, Integer}","page":"Dev Index","title":"DeepART.incremental_supervised_train!","text":"incremental_supervised_train!(\n    art::DeepART.DeepARTModule,\n    x::AbstractArray{T} where T<:Real,\n    y::Integer\n) -> Any\n\n\nSummary\n\nOverload for incremental supervised training for a DeepARTModule model.\n\nArguments\n\nart::DeepARTModule: the DeepARTModule model.\nx::RealVector: the input sample vector to use.\ny::Integer: the label for the input sample.\n\nMethod List / Definition Locations\n\nincremental_supervised_train!(art, x, y)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/incremental.jl:66.\n\nincremental_supervised_train!(art, x, y)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/incremental.jl:82.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.initialize_exp_queue!-Tuple{DeepART.ExperienceQueueContainer, AbstractDict}","page":"Dev Index","title":"DeepART.initialize_exp_queue!","text":"initialize_exp_queue!(\n    eqc::DeepART.ExperienceQueueContainer,\n    scenario_dict::AbstractDict\n)\n\n\nSummary\n\nInitializes an ExperienceQueueContainer from the provided scenario dictionary.\n\nArguments\n\neqc::ExperienceQueueContainer: the container with the queue and stats to initialize.\nscenario_dict::AbstractDict: the dictionary with the scenario regimes and block types.\n\nMethod List / Definition Locations\n\ninitialize_exp_queue!(eqc, scenario_dict)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/scenario.jl:56.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.instar-Tuple{AbstractArray, AbstractArray, AbstractArray, Float64}","page":"Dev Index","title":"DeepART.instar","text":"instar(\n    x::AbstractArray,\n    y::AbstractArray,\n    W::AbstractArray,\n    eta::Float64\n) -> Any\n\n\nSummary\n\nInstar learning rule.\n\nArguments\n\nx::RealVector: the input sample vector to use.\nW::RealVector: the weight vector to use.\n\n,\n\neta::Float: learning rate.\n\nMethod List / Definition Locations\n\ninstar(x, y, W, eta)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/common.jl:192.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.instar-Tuple{AbstractArray{T} where T<:Real, Tuple, Flux.Chain, Float64}","page":"Dev Index","title":"DeepART.instar","text":"instar(\n    x::AbstractArray{T} where T<:Real,\n    y::Tuple,\n    W::Flux.Chain,\n    eta::Float64\n)\n\n\nSummary\n\nMethod List / Definition Locations\n\ninstar(x, y, W, eta)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/common.jl:216.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.is_complete-Tuple{DeepART.Agent}","page":"Dev Index","title":"DeepART.is_complete","text":"is_complete(agent::DeepART.Agent) -> Bool\n\n\nSummary\n\nChecks if the Agent is done with its scenario queue.\n\nArguments\n\nagent::Agent: the agent to test scenario completion on.\n\nMethod List / Definition Locations\n\nis_complete(agent)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/agents.jl:129.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.json_load-Tuple{AbstractString}","page":"Dev Index","title":"DeepART.json_load","text":"json_load(filepath::AbstractString) -> Any\n\n\nSummary\n\nLoads the JSON file, interpreted as a dictionary.\n\nArguments\n\nfilepath::AbstractString: the full file name (with path) to load.\n\nMethod List / Definition Locations\n\njson_load(filepath)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/common.jl:55.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.json_save-Tuple{AbstractString, AbstractDict}","page":"Dev Index","title":"DeepART.json_save","text":"json_save(filepath::AbstractString, dict::AbstractDict)\n\n\nSummary\n\nSaves the dictionary to a JSON file.\n\nArguments\n\nfilepath::AbstractString: the full file name (with path) to save to.\ndict::AbstractDict: the dictionary to save to the file.\n\nMethod List / Definition Locations\n\njson_save(filepath, dict)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/common.jl:42.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.learn!-Tuple{DeepART.DeepHeadART, AbstractArray{T} where T<:Real, Tuple, Tuple, Integer}","page":"Dev Index","title":"DeepART.learn!","text":"learn!(\n    art::DeepART.DeepHeadART,\n    x::AbstractArray{T} where T<:Real,\n    f1a::Tuple,\n    f2a::Tuple,\n    index::Integer\n)\n\n\nSummary\n\nUpdates the weights of both the F1 layer and F2 layer (at the index) of the DeepHeadART module.\n\nArguments\n\nart::DeepHeadART: the DeepHeadART module.\nactivations::Tuple: the activations tuple.\nindex::Integer: the index of the node to update.\n\nMethod List / Definition Locations\n\nlearn!(art, x, f1a, f2a, index)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/DeepHeadART.jl:245.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.learn_SimpleDeepART!-Tuple{AdaptiveResonance.AbstractFuzzyART, AbstractVector{T} where T<:Real, Integer}","page":"Dev Index","title":"DeepART.learn_SimpleDeepART!","text":"learn_SimpleDeepART!(\n    art::AdaptiveResonance.AbstractFuzzyART,\n    x::AbstractVector{T} where T<:Real,\n    index::Integer\n) -> Any\n\n\nSummary\n\nIn place learning function.\n\nArguments\n\nart::AbstractFuzzyART: the FuzzyART module to update.\nx::RealVector: the sample to learn from.\nindex::Integer: the index of the FuzzyART weight to update.\n\nMethod List / Definition Locations\n\nlearn_SimpleDeepART!(art, x, index)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/SimpleDeepART/SimpleDeepART.jl:281.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.learn_model-Tuple{DeepART.DeepARTModule, AbstractArray{T} where T<:Real}","page":"Dev Index","title":"DeepART.learn_model","text":"learn_model(\n    art::DeepART.DeepARTModule,\n    xf::AbstractArray{T} where T<:Real;\n    y\n) -> Union{Tuple{}, Tuple{Any, Vararg{Any}}}\n\n\nSummary\n\nWeight update rule for the deep model component of a DeepARTModule.\n\nMethod List / Definition Locations\n\nlearn_model(art, xf; y)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/FIA.jl:183.\n\nlearn_model(art, xf; y)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/common.jl:268.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.learn_model-Tuple{DeepART.FIA, AbstractArray{T} where T<:Real}","page":"Dev Index","title":"DeepART.learn_model","text":"learn_model(\n    art::DeepART.FIA,\n    xf::AbstractArray{T} where T<:Real;\n    y\n) -> Union{Tuple{}, Tuple{Any, Vararg{Any}}}\n\n\nSummary\n\nSpecific weight update rule for the deep model component of a FIA.\n\nMethod List / Definition Locations\n\nlearn_model(art, xf; y)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/FIA.jl:183.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.load_all_datasets","page":"Dev Index","title":"DeepART.load_all_datasets","text":"load_all_datasets() -> Dict{String, DeepART.DataSplit}\nload_all_datasets(\n    topdir::AbstractString\n) -> Dict{String, DeepART.DataSplit}\nload_all_datasets(\n    topdir::AbstractString,\n    shuffle::Bool\n) -> Dict{String, DeepART.DataSplit}\nload_all_datasets(\n    topdir::AbstractString,\n    shuffle::Bool,\n    p::Float64\n) -> Dict{String, DeepART.DataSplit}\n\n\nSummary\n\nLoades the datasets from the data package experiment.\n\nArguments\n\ntopdir::AbstractString: default data_dir(\"data-package\"), the directory containing the CSV data package files.\nshuffle::Bool: flag for shuffling the data, default true.\np::Float: kwarg, the split ratio ∈ (0, 1), default 0.8.\n\nMethod List / Definition Locations\n\nload_all_datasets()\nload_all_datasets(topdir)\nload_all_datasets(topdir, shuffle)\nload_all_datasets(topdir, shuffle, p)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/data.jl:756.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DeepART.load_data_package_dataset-Tuple{AbstractString}","page":"Dev Index","title":"DeepART.load_data_package_dataset","text":"load_data_package_dataset(\n    name::AbstractString;\n    shuffle,\n    p\n) -> DeepART.DataSplit\n\n\nSummary\n\nLoader function for the data package datasets.\n\nMethod List / Definition Locations\n\nload_data_package_dataset(name; shuffle, p)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/data.jl:711.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.load_dataset_file-Tuple{AbstractString}","page":"Dev Index","title":"DeepART.load_dataset_file","text":"load_dataset_file(\n    filename::AbstractString\n) -> Union{Tuple{Matrix, Matrix{AbstractString}}, Matrix}\n\n\nSummary\n\nLoads a dataset from a local file.\n\nArguments\n\nfilename::AbstractString: the location of the file to load with a default value.\n\nMethod List / Definition Locations\n\nload_dataset_file(filename)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/data.jl:631.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.load_one_dataset-Tuple{AbstractString}","page":"Dev Index","title":"DeepART.load_one_dataset","text":"load_one_dataset(name::AbstractString; kwargs...) -> Any\n\n\nSummary\n\nLoads a single dataset by name, dispatching accordingly.\n\nArguments\n\nname::AbstractString: the name of the dataset to load.\nargs...: additional arguments to pass to the dataset loading function.\n\nMethod List / Definition Locations\n\nload_one_dataset(name; kwargs...)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/data.jl:736.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.load_sim_results-Tuple{AbstractString, Vararg{Any}}","page":"Dev Index","title":"DeepART.load_sim_results","text":"load_sim_results(data_file::AbstractString, args...) -> Any\n\n\nSummary\n\nWrapper for loading simulation results with arbitrarily many fields.\n\nArguments\n\ndata_file::AbstractString: the location of the datafile for loading.\nargs...: the string names of the files to open.\n\nMethod List / Definition Locations\n\nload_sim_results(data_file, args)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/train-test.jl:248.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.log_art_stats!-Tuple{DeepART.DeepARTModule, Integer, Bool}","page":"Dev Index","title":"DeepART.log_art_stats!","text":"log_art_stats!(\n    art::DeepART.DeepARTModule,\n    bmu::Integer,\n    mismatch::Bool\n)\n\n\nSummary\n\nLogs common statistics of an ART module after a training/classification iteration.\n\nArguments\n\nart::ARTModule: the ART module that just underwent training/classification.\nbmu::Integer: the best-matching unit integer index.\nmismatch::Bool: flag of whether there was a mismatch in this iteration.\n\nMethod List / Definition Locations\n\nlog_art_stats!(art, bmu, mismatch)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/common.jl:36.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.log_data-Tuple{Any, DeepART.Experience, Dict, Dict}","page":"Dev Index","title":"DeepART.log_data","text":"log_data(\n    data_logger,\n    experience::DeepART.Experience,\n    results::Dict,\n    params::Dict;\n    status\n) -> Any\n\n\nSummary\n\nLogs data from an L2 Experience.\n\nArguments\n\ndata_logger::PythonCall.Py: the l2logger DataLogger.\nexp::Experience: the Experience that the AbstractAgent just processed.\nresults::Dict: the results from the AbstractAgent's Experience.\nstatus::AbstractString: string expressing if the Experience was processed.\n\nMethod List / Definition Locations\n\nlog_data(data_logger, experience, results, params; status)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/agents.jl:218.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.multi_activations-Tuple{DeepART.DeepHeadART, AbstractArray{T} where T<:Real}","page":"Dev Index","title":"DeepART.multi_activations","text":"multi_activations(\n    art::DeepART.DeepHeadART,\n    x::AbstractArray{T} where T<:Real\n) -> Tuple{Union{Tuple{}, Tuple{Any, Vararg{Any}}}, Tuple{Union{Tuple{}, Tuple{Any, Vararg{Any}}}, Vector}}\n\n\nSummary\n\nForward pass for a DeepHeadART module with activations.\n\nArguments\n\nart::DeepHeadART: the DeepHeadART module.\nx::RealArray: the input data.\n\nMethod List / Definition Locations\n\nmulti_activations(art, x)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/DeepHeadART.jl:205.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.multi_activations-Tuple{DeepART.MultiHeadField, AbstractArray{T} where T<:Real}","page":"Dev Index","title":"DeepART.multi_activations","text":"multi_activations(\n    field::DeepART.MultiHeadField,\n    x::AbstractArray{T} where T<:Real\n) -> Tuple{Union{Tuple{}, Tuple{Any, Vararg{Any}}}, Vector}\n\n\nSummary\n\nComputes the forward pass for a MultiHeadField and returns the activations of the shared and head layers.\n\nArguments\n\nfield::MultiHeadField: the MultiHeadField object.\nx::RealArray: the input data.\n\nMethod List / Definition Locations\n\nmulti_activations(field, x)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/MultiHeadField.jl:162.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.n_classor","page":"Dev Index","title":"DeepART.n_classor","text":"n_classor(y::AbstractVector{T} where T<:Integer) -> Any\nn_classor(\n    y::AbstractVector{T} where T<:Integer,\n    n_class::Int64\n) -> Any\n\n\nSummary\n\nReturns the number of classes given a vector of labels.\n\nIf the number of classes is provided, that is used; otherwise, the number of classes is inferred from the labels.\n\nArguments\n\ny::IntegerVector: the vector of integer labels.\nn_class::Int=0: the true number of classes (if known).\n\nMethod List / Definition Locations\n\nn_classor(y)\nn_classor(y, n_class)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/common.jl:59.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DeepART.normalize_FIM-Tuple{Any}","page":"Dev Index","title":"DeepART.normalize_FIM","text":"normalize_FIM(FIM) -> Any\n\n\nSummary\n\nNormalizes a Fisher Information Matrix (FIM).\n\nMethod List / Definition Locations\n\nnormalize_FIM(FIM)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/Optimisers/EWCLoss.jl:74.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.one_coldify-Tuple{AbstractArray}","page":"Dev Index","title":"DeepART.one_coldify","text":"one_coldify(y_hat::AbstractArray) -> Any\n\n\nSummary\n\nOne-cold vector encoding of a one-hot encoded array.\n\nMethod List / Definition Locations\n\none_coldify(y_hat)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/train-test.jl:496.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.one_hot","page":"Dev Index","title":"DeepART.one_hot","text":"one_hot(\n    y::AbstractVector{T} where T<:Integer\n) -> OneHotArrays.OneHotArray\none_hot(\n    y::AbstractVector{T} where T<:Integer,\n    n_class::Int64\n) -> OneHotArrays.OneHotArray\n\n\nSummary\n\nOne-hot encodes the vector of labels into a matrix of ones.\n\nArguments\n\ny::IntegerVector: the vector of integer labels.\nn_class::Int=0: the true number of classes (if known).\n\nMethod List / Definition Locations\n\none_hot(y)\none_hot(y, n_class)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/common.jl:101.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DeepART.order_to_string-Tuple{Vector{Vector{Int64}}}","page":"Dev Index","title":"DeepART.order_to_string","text":"order_to_string(order::Vector{Vector{Int64}}) -> String\n\n\nSummary\n\nTakes an ordering and returns the full string representation.\n\nMethod List / Definition Locations\n\norder_to_string(order)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/scenario.jl:281.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.order_to_task_strings-Tuple{Vector{Vector{Int64}}}","page":"Dev Index","title":"DeepART.order_to_task_strings","text":"order_to_task_strings(\n    order::Vector{Vector{Int64}}\n) -> Vector{String}\n\n\nSummary\n\nTakes an ordering and returns a vector of the string representations of individual tasks.\n\nMethod List / Definition Locations\n\norder_to_task_strings(order)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/scenario.jl:291.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.paper_results_dir-Tuple","page":"Dev Index","title":"DeepART.paper_results_dir","text":"paper_results_dir(args...) -> String\n\n\nSummary\n\nDrWatson-style paper results directory.\n\nArguments\n\nargs...: the string directories to append to the directory.\n\nMethod List / Definition Locations\n\npaper_results_dir(args)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/drwatson.jl:68.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.percentage_formatter","page":"Dev Index","title":"DeepART.percentage_formatter","text":"Inline formatter for percentages in plots.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DeepART.random_dist_grouping-Tuple{DeepART.DataSplit, Int64}","page":"Dev Index","title":"DeepART.random_dist_grouping","text":"random_dist_grouping(\n    data::DeepART.DataSplit,\n    group_size::Int64\n) -> Vector{Vector{Int64}}\n\n\nSummary\n\nGenerates a random grouping from the provided dataset and selected group size.\n\nMethod List / Definition Locations\n\nrandom_dist_grouping(data, group_size)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/dist.jl:74.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.random_grouping-Tuple{DeepART.DataSplit, Int64}","page":"Dev Index","title":"DeepART.random_grouping","text":"random_grouping(\n    data::DeepART.DataSplit,\n    group_size::Int64\n) -> Vector{Vector{Int64}}\n\n\nSummary\n\nGenerates a random grouping from the provided dataset and selected group size.\n\nMethod List / Definition Locations\n\nrandom_grouping(data, group_size)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/scenario.jl:230.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.results_dir-Tuple","page":"Dev Index","title":"DeepART.results_dir","text":"results_dir(args...) -> String\n\n\nSummary\n\nPoints to the results directory.\n\nArguments\n\nargs...: the string directories to append to the directory.\n\nMethod List / Definition Locations\n\nresults_dir(args)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/drwatson.jl:32.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.run_scenario-Tuple{DeepART.Agent, Any, DeepART.ClassIncrementalDataSplit, Any, AbstractDict}","page":"Dev Index","title":"DeepART.run_scenario","text":"run_scenario(\n    agent::DeepART.Agent,\n    name_map,\n    data::DeepART.ClassIncrementalDataSplit,\n    data_logger,\n    d::AbstractDict\n)\n\n\nSummary\n\nRuns an agent's scenario.\n\nArguments\n\nagent::Agent: a struct that contains an Agent and scenario.\ndata_logger::PythonCall.Py: a l2logger object.\n\nMethod List / Definition Locations\n\nrun_scenario(agent, name_map, data, data_logger, d)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/agents.jl:249.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.sanitize_block_type-Tuple{AbstractString}","page":"Dev Index","title":"DeepART.sanitize_block_type","text":"sanitize_block_type(block_type::AbstractString)\n\n\nSummary\n\nSanitize the selected block type against the BLOCK_TYPES constant.\n\nArguments\n\nblock_type::AbstractString: the selected block type.\n\nMethod List / Definition Locations\n\nsanitize_block_type(block_type)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/common.jl:81.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.sanitize_in_list-Union{Tuple{T}, Tuple{AbstractString, T, Vector{T}}} where T","page":"Dev Index","title":"DeepART.sanitize_in_list","text":"sanitize_in_list(\n    selection_type::AbstractString,\n    selection,\n    acceptable::Array{T, 1}\n)\n\n\nSummary\n\nSanitizes a selection within a list of acceptable options.\n\nArguments\n\nselection_type::AbstractString: a string describing the option in case it is misused.\nselection::Any: a single selection from a list.\n\nMethod List / Definition Locations\n\nsanitize_in_list(selection_type, selection, acceptable)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/common.jl:66.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.sanitize_log_state-Tuple{AbstractString}","page":"Dev Index","title":"DeepART.sanitize_log_state","text":"sanitize_log_state(log_state::AbstractString)\n\n\nSummary\n\nSanitize the selected log state against the LOG_STATES constant.\n\nArguments\n\nlog_state::AbstractString: the selected log state.\n\nMethod List / Definition Locations\n\nsanitize_log_state(log_state)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/common.jl:92.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.save_sim-Tuple{Function, AbstractDict, AbstractDict}","page":"Dev Index","title":"DeepART.save_sim","text":"save_sim(\n    dir_func::Function,\n    d::AbstractDict,\n    fulld::AbstractDict\n)\n\n\nSummary\n\nCommon save function for simulations.\n\nArguments\n\nMethod List / Definition Locations\n\nsave_sim(dir_func, d, fulld)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/dist.jl:31.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.saveplot-Tuple{Any, AbstractString, Vector{String}}","page":"Dev Index","title":"DeepART.saveplot","text":"saveplot(\n    p,\n    filename::AbstractString,\n    parts::Vector{String};\n    paper,\n    extension\n)\n\n\nSummary\n\nWrapper for saving results plots.\n\nMethod List / Definition Locations\n\nsaveplot(p, filename, parts; paper, extension)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/plots.jl:352.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.shuffle_pairs-Tuple{AbstractArray, AbstractArray}","page":"Dev Index","title":"DeepART.shuffle_pairs","text":"shuffle_pairs(\n    features::AbstractArray,\n    labels::AbstractArray\n) -> Tuple{Any, Any}\n\n\nSummary\n\nWrapper for shuffling features and their labels.\n\nArguments\n\nfeatures::AbstractArray: the set of data features.\nlabels::AbstractArray: the set of labels corresponding to the features.\n\nMethod List / Definition Locations\n\nshuffle_pairs(features, labels)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/common.jl:39.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.string_to_orders-Tuple{AbstractString}","page":"Dev Index","title":"DeepART.string_to_orders","text":"string_to_orders(order_string::AbstractString) -> Vector\n\n\nSummary\n\nTakes a string ordering and gets back the integer ordering.\n\nMethod List / Definition Locations\n\nstring_to_orders(order_string)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/l2/scenario.jl:301.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.supervised_train!","page":"Dev Index","title":"DeepART.supervised_train!","text":"supervised_train!(\n    model::DeepART.SimpleDeepART,\n    data::DeepART.SupervisedDataset\n)\nsupervised_train!(\n    model::DeepART.SimpleDeepART,\n    data::DeepART.SupervisedDataset,\n    n_train::Integer\n)\n\n\nSummary\n\nRuns the supervised training of a SimpleDeepART module.\n\nArguments\n\nmodel::SimpleDeepART: the SimpleDeepART model.\ndata::SupervisedDataset: a SupervisedDataset containing samples and their labels.\nn_train::Integer: the upper-bound of number of samples to train, default 0.\n\nIf this is not manually set, all samples are trained upon.\n\nMethod List / Definition Locations\n\nsupervised_train!(model, data)\nsupervised_train!(model, data, n_train)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/SimpleDeepART/SimpleDeepART.jl:189.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DeepART.task_incrementalize","page":"Dev Index","title":"DeepART.task_incrementalize","text":"task_incrementalize(\n    data::Vector{DeepART.SupervisedDataset},\n    groupings::Vector{Vector{Int64}}\n) -> Vector{DeepART.SupervisedDataset}\ntask_incrementalize(\n    data::Vector{DeepART.SupervisedDataset},\n    groupings::Vector{Vector{Int64}},\n    shuffle::Bool\n) -> Vector{DeepART.SupervisedDataset}\n\n\nSummary\n\nGroups multiple datasets within a ClassIncrementalSupervisedDataset according to a vector of groupings.\n\nArguments\n\ndata:ClassIncrementalSupervisedDataset: the vector of datasets to group.\ngroupings::Vector{Vector{Int}}: the set of groupings to perform.\nshuffle::Bool: flag for shuffling the data, default true.\n\nMethod List / Definition Locations\n\ntask_incrementalize(data, groupings)\ntask_incrementalize(data, groupings, shuffle)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/ClassIncrementalDataSplit.jl:169.\n\n\n\n\n\n","category":"function"},{"location":"man/dev-index/#DeepART.tensorize_dataset-Tuple{DeepART.SupervisedDataset}","page":"Dev Index","title":"DeepART.tensorize_dataset","text":"tensorize_dataset(\n    data::DeepART.SupervisedDataset\n) -> DeepART.SupervisedDataset\n\n\nSummary\n\nTurns the features of a dataset into a tensor.\n\nArguments\n\ndata::SupervisedDataset: a SupervisedDataset containing samples and their labels.\n\nMethod List / Definition Locations\n\ntensorize_dataset(data)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/SupervisedDataset.jl:95.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.tensorize_datasplit-Tuple{DeepART.DataSplit}","page":"Dev Index","title":"DeepART.tensorize_datasplit","text":"tensorize_datasplit(\n    data::DeepART.DataSplit\n) -> DeepART.DataSplit\n\n\nSummary\n\nTensorizes both the training and testing components of a DataSplit.\n\nArguments\n\ndata::DataSplit: a DataSplit container of a supervised train/test split.\n\nMethod List / Definition Locations\n\ntensorize_datasplit(data)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/DataSplit.jl:103.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.term_accuracy-Union{Tuple{Vector{T}}, Tuple{T}} where T<:Real","page":"Dev Index","title":"DeepART.term_accuracy","text":"term_accuracy(\n    accs::Array{T<:Real, 1}\n) -> Union{UnicodePlots.Plot{T, Val{true}} where T<:UnicodePlots.BrailleCanvas, UnicodePlots.Plot{T, Val{false}} where T<:UnicodePlots.BrailleCanvas}\n\n\nSummary\n\nTerminal plot function for a simple vector of accuracies.\n\nMethod List / Definition Locations\n\nterm_accuracy(accs)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/plots.jl:14.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.term_preds-Tuple{Vector{Int64}}","page":"Dev Index","title":"DeepART.term_preds","text":"term_preds(\n    y_hats::Vector{Int64};\n    title\n) -> UnicodePlots.Plot{T, Val{_A}} where {T<:(UnicodePlots.BarplotGraphics{Int64}), _A}\n\n\nSummary\n\nTerminal barplot function for category predictions.\n\nMethod List / Definition Locations\n\nterm_preds(y_hats; title)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/plots.jl:33.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.text_targets_to_ints-Tuple{Vector{String}}","page":"Dev Index","title":"DeepART.text_targets_to_ints","text":"text_targets_to_ints(\n    targets::Vector{String}\n) -> Vector{Int64}\n\n\nSummary\n\nConverts a vector of string targets to a vector of integer targets using a target map.\n\nArguments\n\ntargets::Vector{String}: the vector of string targets to convert.\ntarget_map::Dict{String, Int}: the mapping of string targets to integer targets.\n\nMethod List / Definition Locations\n\ntext_targets_to_ints(targets)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/data/data.jl:22.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.train!-Tuple{DeepART.DeepHeadART, AbstractArray{T} where T<:Real}","page":"Dev Index","title":"DeepART.train!","text":"train!(\n    art::DeepART.DeepHeadART,\n    x::AbstractArray{T} where T<:Real;\n    y\n) -> Any\n\n\nSummary\n\nTrains the DeepHeadART module on the provided sample x.\n\nArguments\n\nart::DeepHeadART: the DeepHeadART module.\nx::RealArray: the input data.\n\nMethod List / Definition Locations\n\ntrain!(art, x; y)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/DeepHeadART.jl:356.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.train_inc!-Tuple{Union{AdaptiveResonance.ARTModule, DeepART.DeepARTModule, DeepART.Hebb.BlockNet, DeepART.Hebb.HebbModel}, DeepART.ClassIncrementalDataSplit}","page":"Dev Index","title":"DeepART.train_inc!","text":"train_inc!(\n    art::Union{AdaptiveResonance.ARTModule, DeepART.DeepARTModule, DeepART.Hebb.BlockNet, DeepART.Hebb.HebbModel},\n    tidata::DeepART.ClassIncrementalDataSplit;\n    display,\n    desc\n) -> Vector{Vector{Int64}}\n\n\nSummary\n\nTask-incremental training/testing loop.\n\nArguments\n\nart::DeepARTModule: the DeepARTModule model.\ntidata::ClassIncrementalDataSplit: the task-incremental data split.\nn_train::Integer: the number of training iterations.\n\nMethod List / Definition Locations\n\ntrain_inc!(art, tidata; display, desc)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/train-test.jl:200.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.train_test!-Tuple{DeepART.DataSplit, Dict}","page":"Dev Index","title":"DeepART.train_test!","text":"train_test!(\n    data::DeepART.DataSplit,\n    opts::Dict\n) -> Vector{Any}\n\n\nSummary\n\nSimple train/test split experiment using an MLP with gradient descent on the datset.\n\nMethod List / Definition Locations\n\ntrain_test!(data, opts)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/train-test.jl:532.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.tt_basic!-Tuple{Union{AdaptiveResonance.ARTModule, DeepART.DeepARTModule, DeepART.Hebb.BlockNet, DeepART.Hebb.HebbModel}, DeepART.DataSplit}","page":"Dev Index","title":"DeepART.tt_basic!","text":"tt_basic!(\n    art::Union{AdaptiveResonance.ARTModule, DeepART.DeepARTModule, DeepART.Hebb.BlockNet, DeepART.Hebb.HebbModel},\n    data::DeepART.DataSplit;\n    display,\n    epochs\n) -> Dict\n\n\nSummary\n\nSingle-task training/testing loop.\n\nArguments\n\nart::CommonARTModule: the CommonARTModule model.\ndata::DataSplit: a DataSplit container of a supervised train/test split.\nn_train::Integer: the number of training iterations.\nn_test::Integer: the number of testing iterations.\n\nMethod List / Definition Locations\n\ntt_basic!(art, data; display, epochs)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/train-test.jl:266.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.tt_dist-Tuple{AbstractDict, Function}","page":"Dev Index","title":"DeepART.tt_dist","text":"tt_dist(d::AbstractDict, dir_func::Function; rerun)\n\n\nSummary\n\nTrains and classifies a START module on the provided statements.\n\nArguments\n\nMethod List / Definition Locations\n\ntt_dist(d, dir_func; rerun)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/dist.jl:90.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.tt_inc!-Tuple{Union{AdaptiveResonance.ARTModule, DeepART.DeepARTModule, DeepART.Hebb.BlockNet, DeepART.Hebb.HebbModel}, DeepART.ClassIncrementalDataSplit, DeepART.DataSplit}","page":"Dev Index","title":"DeepART.tt_inc!","text":"tt_inc!(\n    art::Union{AdaptiveResonance.ARTModule, DeepART.DeepARTModule, DeepART.Hebb.BlockNet, DeepART.Hebb.HebbModel},\n    tidata::DeepART.ClassIncrementalDataSplit,\n    data::DeepART.DataSplit;\n    display\n) -> Dict\n\n\nSummary\n\nMulti-task training/testing loop for DeepARTModules.\n\nArguments\n\nart::DeepARTModule: the DeepARTModule model.\ntidata::ClassIncrementalDataSplit: the task-incremental data split.\ndata::DataSplit: a DataSplit container of a supervised train/test split.\nn_train::Integer: the number of training iterations.\nn_test::Integer: the number of testing iterations.\n\nMethod List / Definition Locations\n\ntt_inc!(art, tidata, data; display)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/experiments/train-test.jl:331.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.work_dir-Tuple","page":"Dev Index","title":"DeepART.work_dir","text":"work_dir(args...) -> String\n\n\nSummary\n\nPoints to the work directory containing raw datasets, processed datasets, and results.\n\nArguments\n\nargs...: the string directories to append to the directory.\n\nMethod List / Definition Locations\n\nwork_dir(args)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/drwatson.jl:20.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#DeepART.x_W_min_norm-Tuple{AbstractVector{T} where T<:Real, AbstractVector{T} where T<:Real}","page":"Dev Index","title":"DeepART.x_W_min_norm","text":"x_W_min_norm(\n    x::AbstractVector{T} where T<:Real,\n    W::AbstractVector{T} where T<:Real\n) -> Any\n\n\nSummary\n\nLow-level common function for computing the 1-norm of the element minimum of a sample and weights.\n\nArguments\n\nx::RealVector: the input sample vector to use.\nW::RealVector: the weight vector to use.\n\nMethod List / Definition Locations\n\nx_W_min_norm(x, W)\n\ndefined at /home/runner/work/DeepART/DeepART/src/lib/models/DeepART/common.jl:149.\n\n\n\n\n\n","category":"method"},{"location":"man/full-index/#main-index","page":"Index","title":"Index","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"This page lists the core methods and types of the Julia component of the DeepART project.","category":"page"},{"location":"man/full-index/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"This section enumerates the names exported by the package, each of which links to its corresponding Documentation.","category":"page"},{"location":"man/full-index/#index-modules","page":"Index","title":"Modules","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Pages   = [\"full-index.md\"]\nModules = [DeepART, ]\nOrder = [:module]","category":"page"},{"location":"man/full-index/#index-methods","page":"Index","title":"Methods","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Pages   = [\"full-index.md\"]\nModules = [DeepART, ]\nOrder = [:function]","category":"page"},{"location":"man/full-index/#index-types","page":"Index","title":"Types","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Pages   = [\"full-index.md\"]\nModules = [DeepART, ]\nOrder = [:type]","category":"page"},{"location":"man/full-index/#index-constants","page":"Index","title":"Constants","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Pages   = [\"full-index.md\"]\nModules = [DeepART, ]\nOrder = [:constant]","category":"page"},{"location":"man/full-index/#index-docs","page":"Index","title":"Docs","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"This section lists the documentation for every exported name of the DeepART package.","category":"page"},{"location":"man/full-index/#index-modules-docs","page":"Index","title":"Modules","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Modules = [DeepART, ]\nPrivate = false\nOrder = [:module]","category":"page"},{"location":"man/full-index/#DeepART.DeepART","page":"Index","title":"DeepART.DeepART","text":"A module encapsulating the experimental driver code for the DeepART project.\n\nImports\n\nThe following names are imported by the package as dependencies:\n\nAdaptiveResonance\nBase\nCUDA\nColorSchemes\nColors\nCombinatorics\nCore\nDataFrames\nDataStructures\nDeepART.Hebb\nDelimitedFiles\nDocStringExtensions\nDrWatson\nFlux\nImageShow\nImages\nJLD2\nJSON\nMLBase\nMLDatasets\nMLUtils\nNumericalTypeAliases\nParameters\nPkg\nPlots\nPrintf\nProgressMeter\nRandom\nUnicodePlots\n\nExports\n\nThe following names are exported and available when using the package:\n\nDEEPART_VERSION\n\n\n\n\n\n","category":"module"},{"location":"man/full-index/#index-functions-docs","page":"Index","title":"Functions","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Modules = [DeepART, ]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"man/full-index/#index-types-docs","page":"Index","title":"Types","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Modules = [DeepART, ]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"man/full-index/#index-constants-docs","page":"Index","title":"Constants","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Modules = [DeepART, ]\nPrivate = false\nOrder = [:constant]","category":"page"},{"location":"man/full-index/#DeepART.DEEPART_VERSION","page":"Index","title":"DeepART.DEEPART_VERSION","text":"DEEPART_VERSION\n\nDescription\n\nA constant that contains the version of the installed DeepART.jl package.\n\nThis value is computed at compile time, so it may be used to programmatically verify the version of DeepART that is installed in case a compat entry in your Project.toml is missing or otherwise incorrect.\n\n\n\n\n\n","category":"constant"},{"location":"man/guide/#Guide","page":"Guide","title":"Guide","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"TODO: this is where the user guide will go for the project.","category":"page"},{"location":"","page":"Home","title":"Home","text":"DocTestSetup = quote\n    using DeepART, Dates\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: header)","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Documentation for the DeepART.jl project.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the Index for the complete list of documented functions and types.","category":"page"},{"location":"#Manual-Outline","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This documentation is split into the following sections:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"man/guide.md\",\n    \"../examples/index.md\",\n    \"man/modules.md\",\n    \"man/contributing.md\",\n    \"man/full-index.md\",\n    \"man/dev-index.md\",\n]\nDepth = 1","category":"page"},{"location":"#Documentation-Build","page":"Home","title":"Documentation Build","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This documentation was built using Documenter.jl with the following version and OS:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DeepART, Dates # hide\nprintln(\"DeepART v$(DEEPART_VERSION) docs built $(Dates.now()) with Julia $(VERSION) on $(Sys.KERNEL)\") # hide","category":"page"},{"location":"#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you make use of this project, please generate your citation with the CITATION.cff file of the repository. Alternatively, you may use the following BibTeX entry:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@software{Petrenko_AP6YC_DeepART_2024,\n    author = {Petrenko, Sasha},\n    doi = {10.5281/zenodo.10896042},\n    month = jan,\n    title = {{AP6YC/DeepART}},\n    url = {https://github.com/AP6YC/DeepART},\n    year = {2024}\n}","category":"page"}]
}
